{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Gromarbre - Luxury Marble Company Website\n\n## Overview\n\nGromarbre is a luxury marble company website built with React and Express, showcasing premium marble solutions from Casablanca, Morocco. The application features a comprehensive multi-page company website with an elegant splash screen, detailed service offerings, project portfolios, marble product catalogs, and client contact functionality. The site emphasizes the company's 20+ years of experience in custom marble design projects for hotels, universities, residences, and commercial spaces.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing across multiple pages (Home, Services, Projects, Products, Contact)\n- **State Management**: TanStack React Query for server state management and API interactions\n- **Styling**: Tailwind CSS with custom color variables for brand consistency (gold/blue theme)\n- **UI Components**: Radix UI primitives with shadcn/ui component library for accessible, customizable components\n- **Animations**: Framer Motion for smooth page transitions and scroll-based reveals\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API endpoints for contact form submissions\n- **Request Handling**: Express middleware for JSON parsing, URL encoding, and error handling\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n### Data Storage Solutions\n- **ORM**: Drizzle ORM for type-safe database interactions\n- **Database**: PostgreSQL with Neon serverless connection\n- **Schema**: Structured tables for users and contact form submissions\n- **Validation**: Zod schemas for runtime type validation and data integrity\n- **Storage Interface**: Abstracted storage layer supporting both in-memory (development) and database persistence\n\n### Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **User Model**: Basic user authentication structure with username/password fields\n- **Security**: Input validation and sanitization through Zod schemas\n\n### External Dependencies\n- **Database**: Neon PostgreSQL serverless database\n- **Email Integration**: Contact form submissions stored in database (ready for email service integration)\n- **Maps**: Google Maps integration for showroom location display\n- **Fonts**: Google Fonts (Cormorant Garamond for headings, Raleway for body text)\n- **Icons**: Font Awesome 6.4.0 for consistent iconography\n- **Image Hosting**: Unsplash for high-quality marble and interior photography\n\nThe architecture follows a monorepo structure with shared TypeScript definitions, enabling type safety across client and server boundaries. The design emphasizes performance with code splitting, lazy loading, and optimized build processes through Vite.","size_bytes":3126},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":978},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { contactFormSchema } from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API routes for contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      // Validate the contact form data\n      const contactData = contactFormSchema.parse(req.body);\n      \n      // Store the contact form submission\n      const result = await storage.saveContactForm(contactData);\n      \n      // Return success response\n      res.status(200).json({ \n        success: true, \n        message: \"Contact form submitted successfully\",\n        id: result.id\n      });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        // Handle validation errors\n        const validationError = fromZodError(error);\n        res.status(400).json({ \n          success: false, \n          message: \"Validation error\", \n          errors: validationError.message\n        });\n      } else {\n        // Handle other errors\n        console.error(\"Error submitting contact form:\", error);\n        res.status(500).json({ \n          success: false, \n          message: \"An error occurred while submitting the form\"\n        });\n      }\n    }\n  });\n\n  // API route to get contact form submissions (for admin purposes)\n  app.get(\"/api/contact\", async (req, res) => {\n    try {\n      const contactForms = await storage.getContactForms();\n      res.status(200).json(contactForms);\n    } catch (error) {\n      console.error(\"Error fetching contact forms:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"An error occurred while fetching contact form submissions\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1935},"server/storage.ts":{"content":"import { users, type User, type InsertUser, contactForms, type ContactForm, type InsertContactForm } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Contact form methods\n  saveContactForm(contactForm: InsertContactForm): Promise<ContactForm>;\n  getContactForms(): Promise<ContactForm[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private contactForms: Map<number, ContactForm>;\n  currentId: number;\n  contactFormId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.contactForms = new Map();\n    this.currentId = 1;\n    this.contactFormId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  // Contact form methods implementation\n  async saveContactForm(contactFormData: InsertContactForm): Promise<ContactForm> {\n    const id = this.contactFormId++;\n    const now = new Date();\n    \n    const contactForm: ContactForm = {\n      id,\n      name: contactFormData.name,\n      email: contactFormData.email,\n      phone: contactFormData.phone,\n      subject: contactFormData.subject || \"\", // Handle optional field\n      message: contactFormData.message,\n      createdAt: now\n    };\n    \n    this.contactForms.set(id, contactForm);\n    return contactForm;\n  }\n  \n  async getContactForms(): Promise<ContactForm[]> {\n    return Array.from(this.contactForms.values()).sort((a, b) => \n      b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2106},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Contact form schema\nexport const contactForms = pgTable(\"contact_forms\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  subject: text(\"subject\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const contactFormSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  phone: z.string().min(5, { message: \"Please enter a valid phone number\" }),\n  subject: z.string().optional(),\n  message: z.string().min(10, { message: \"Message must be at least 10 characters\" }),\n});\n\nexport type ContactForm = typeof contactForms.$inferSelect;\nexport type InsertContactForm = z.infer<typeof contactFormSchema>;\n","size_bytes":1418},"client/src/App.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Route, Switch } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { LanguageProvider } from \"./contexts/LanguageContext\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Footer from \"./components/layout/Footer\";\nimport HomePage from \"./pages/HomePage\";\nimport ServicesPage from \"./pages/ServicesPage\";\nimport ProjectsPage from \"./pages/ProjectsPage\";\nimport ProjectDetailPage from \"./pages/ProjectDetailPage\";\nimport ProductsPage from \"./pages/ProductsPage\";\nimport ProductDetailPage from \"./pages/ProductDetailPage\";\nimport ContactPage from \"./pages/ContactPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/services\" component={ServicesPage} />\n      <Route path=\"/projects\" component={ProjectsPage} />\n      <Route path=\"/projects/:id\" component={ProjectDetailPage} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/products/:id\" component={ProductDetailPage} />\n      <Route path=\"/contact\" component={ContactPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  \n  return (\n    <LanguageProvider>\n      <QueryClientProvider client={queryClient}>\n      \n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <main className=\"flex-grow\">\n          <Router />\n        </main>\n        <Footer />\n      </div>\n      \n        <Toaster />\n      </QueryClientProvider>\n    </LanguageProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1710},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border scroll-smooth;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    @apply font-serif;\n  }\n}\n\n@layer utilities {\n  .text-gold {\n    @apply text-[#f7941d];\n  }\n  \n  .text-gold-dark {\n    @apply text-[#e6840f];\n  }\n  \n  .bg-gold {\n    @apply bg-[#f7941d];\n  }\n  \n  .bg-gold-light {\n    @apply bg-[#ff9f33];\n  }\n  \n  .bg-gold-dark {\n    @apply bg-[#e6840f];\n  }\n  \n  .border-gold {\n    @apply border-[#f7941d];\n  }\n  \n  .hover\\:bg-gold:hover {\n    @apply bg-[#f7941d];\n  }\n  \n  .hover\\:bg-gold-dark:hover {\n    @apply bg-[#e6840f];\n  }\n  \n  .hover\\:text-gold:hover {\n    @apply text-[#f7941d];\n  }\n  \n  .hover\\:border-gold:hover {\n    @apply border-[#f7941d];\n  }\n\n  .bg-blue-dark {\n    @apply bg-[#9db8d4];\n  }\n  \n  .bg-blue-light {\n    @apply bg-[#b0c4de];\n  }\n  \n  .text-blue-dark {\n    @apply text-[#9db8d4];\n  }\n  \n  .text-blue-light {\n    @apply text-[#b0c4de];\n  }\n\n  .text-charcoal {\n    @apply text-[#333333];\n  }\n  \n  .bg-cream {\n    @apply bg-[#F9F6F2];\n  }\n  \n  .font-serif {\n    font-family: 'Cormorant Garamond', serif;\n  }\n\n  .font-sans {\n    font-family: 'Raleway', sans-serif;\n  }\n}\n\n.marble-button {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  z-index: 1;\n}\n\n.marble-button:before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(247, 148, 29, 0.2);\n  transition: all 0.4s ease;\n  z-index: -1;\n}\n\n.marble-button:hover:before {\n  left: 0;\n}\n\n.reveal-section {\n  opacity: 0;\n  transform: translateY(20px);\n  transition: opacity 0.8s ease, transform 0.8s ease;\n}\n\n.reveal-section.active {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n.project-card:hover .project-overlay {\n  opacity: 1;\n}\n\n.fade-in {\n  opacity: 0;\n  animation: fadeIn 0.8s forwards;\n}\n\n@keyframes fadeIn {\n  to { opacity: 1; }\n}\n\n.splash-logo path {\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 1000;\n  animation: draw 3s forwards;\n}\n\n@keyframes draw {\n  to {\n    stroke-dashoffset: 0;\n  }\n}\n","size_bytes":2141},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport type Language = 'fr' | 'en' | 'ar';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport const LanguageProvider = ({ children }: LanguageProviderProps) => {\n  const [language, setLanguage] = useState<Language>('fr'); // French is default\n\n  // Load saved language preference\n  useEffect(() => {\n    const saved = localStorage.getItem('gromarbre-language') as Language;\n    if (saved && ['fr', 'en', 'ar'].includes(saved)) {\n      setLanguage(saved);\n    }\n  }, []);\n\n  // Save language preference\n  const handleSetLanguage = (lang: Language) => {\n    setLanguage(lang);\n    localStorage.setItem('gromarbre-language', lang);\n    \n    // Set document direction for Arabic\n    document.documentElement.dir = lang === 'ar' ? 'rtl' : 'ltr';\n    document.documentElement.lang = lang;\n  };\n\n  // Translation function\n  const t = (key: string): string => {\n    return translations[language]?.[key] || translations.fr[key] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\n// Translation data\nconst translations: Record<Language, Record<string, string>> = {\n  fr: {\n    // Navigation\n    'nav.home': 'Accueil',\n    'nav.services': 'Services',\n    'nav.projects': 'Projets',\n    'nav.products': 'Produits',\n    'nav.contact': 'Contact',\n    \n    // Home page\n    'home.hero.title': 'Excellence en Marbre depuis 1998',\n    'home.hero.subtitle': 'Créateurs de solutions en marbre de luxe à Casablanca, Maroc. Spécialisés dans les projets personnalisés pour hôtels, universités, résidences et espaces commerciaux.',\n    'home.hero.cta': 'Découvrir nos Réalisations',\n    'home.hero.cta2': 'Nos Services',\n    \n    // About section\n    'home.about.title': 'À Propos de Gromarbre',\n    'home.about.description': 'Avec plus de 25 ans d\\'expérience, Gromarbre est le leader marocain de la transformation du marbre. Nous combinons savoir-faire traditionnel et technologies modernes pour créer des œuvres d\\'exception.',\n    'home.about.experience': 'Ans d\\'Excellence',\n    'home.about.projects': 'Projets Réalisés',\n    'home.about.satisfaction': 'Satisfaction Client',\n    \n    // Services section\n    'home.services.title': 'Nos Services',\n    'home.services.design': 'Conception & Design',\n    'home.services.design.desc': 'Plans personnalisés et visualisations 3D pour vos projets',\n    'home.services.fabrication': 'Fabrication Sur-Mesure',\n    'home.services.fabrication.desc': 'Taille et façonnage précis selon vos spécifications',\n    'home.services.installation': 'Installation Professionnelle',\n    'home.services.installation.desc': 'Pose experte par nos équipes qualifiées',\n    'home.services.maintenance': 'Entretien & Restauration',\n    'home.services.maintenance.desc': 'Services de maintenance et restauration de marbre',\n    \n    // Products section\n    'home.products.title': 'Nos Marbres d\\'Exception',\n    'home.products.calacatta': 'Calacatta Or',\n    'home.products.calacatta.desc': 'Marbre italien premium aux veines dorées élégantes',\n    'home.products.carrara': 'Carrara Blanc',\n    'home.products.carrara.desc': 'Marbre classique italien d\\'une pureté exceptionnelle',\n    'home.products.emperador': 'Emperador Foncé',\n    'home.products.emperador.desc': 'Marbre espagnol aux tons riches et profonds',\n    \n    // Contact section\n    'home.contact.title': 'Contactez-Nous',\n    'home.contact.description': 'Prêt à transformer votre espace ? Contactez nos experts pour une consultation gratuite.',\n    'home.contact.cta': 'Demander un Devis',\n    \n    // Products page\n    'products.cta.description': 'Nous pouvons sourcer des variétés de marbre rares et personnalisées pour votre projet. Contactez-nous avec vos exigences.',\n    \n    // Footer\n    'footer.company': 'Entreprise',\n    'footer.services': 'Services',\n    'footer.contact': 'Contact',\n    'footer.rights': 'Tous droits réservés.',\n    'footer.address': 'Casablanca, Maroc',\n    'footer.phone': 'Téléphone',\n    'footer.email': 'Email',\n    'footer.newsletter.desc': 'Abonnez-vous pour recevoir nos actualités et nouveaux projets.',\n    'footer.description': 'Solutions de marbre premium pour espaces de luxe. Avec plus de 20 ans d\\'expertise, nous apportons une élégance intemporelle à chaque projet.',\n    \n    // Products page\n    'products.subtitle': 'Explorez notre sélection de variétés de marbre fins du monde entier.',\n    \n    // Contact page\n    'contact.title': 'Contactez Gromarbre',\n    'contact.subtitle': 'Transformons ensemble vos idées en réalité',\n    'contact.form.name': 'Nom Complet',\n    'contact.form.email': 'Adresse Email',\n    'contact.form.phone': 'Téléphone',\n    'contact.form.subject': 'Sujet',\n    'contact.form.message': 'Message',\n    'contact.form.submit': 'Envoyer le Message',\n    'contact.info.title': 'Informations de Contact',\n    'contact.info.address': 'Adresse',\n    'contact.info.hours': 'Heures d\\'Ouverture',\n    'contact.info.hours.weekday': 'Lun - Ven: 8h00 - 18h00',\n    'contact.info.hours.saturday': 'Sam: 8h00 - 14h00',\n    'contact.info.hours.sunday': 'Dim: Fermé',\n    'contact.form.title': 'Envoyez-nous un Message',\n    'contact.form.sending': 'Envoi en cours...',\n    'contact.info.follow': 'Suivez-Nous',\n    \n    // Additional UI elements\n    'ui.viewDetails': 'Voir Détails',\n    'ui.learnMore': 'En Savoir Plus',\n    'ui.getQuote': 'Demander un Devis',\n    'ui.callToAction': 'Prêt à Transformer Votre Espace?',\n    'ui.newsletter': 'Newsletter',\n    'ui.subscribe': 'S\\'abonner',\n    'ui.quickLinks': 'Liens Rapides',\n  },\n  \n  en: {\n    // Navigation\n    'nav.home': 'Home',\n    'nav.services': 'Services',\n    'nav.projects': 'Projects',\n    'nav.products': 'Products',\n    'nav.contact': 'Contact',\n    \n    // Home page\n    'home.hero.title': 'Marble Excellence Since 1998',\n    'home.hero.subtitle': 'Creators of luxury marble solutions in Casablanca, Morocco. Specialized in custom projects for hotels, universities, residences, and commercial spaces.',\n    'home.hero.cta': 'Discover Our Work',\n    'home.hero.cta2': 'Our Services',\n    \n    // About section\n    'home.about.title': 'About Gromarbre',\n    'home.about.description': 'With over 25 years of experience, Gromarbre is Morocco\\'s leading marble transformation company. We combine traditional craftsmanship with modern technology to create exceptional works.',\n    'home.about.experience': 'Years of Excellence',\n    'home.about.projects': 'Completed Projects',\n    'home.about.satisfaction': 'Client Satisfaction',\n    \n    // Services section\n    'home.services.title': 'Our Services',\n    'home.services.design': 'Design & Planning',\n    'home.services.design.desc': 'Custom plans and 3D visualizations for your projects',\n    'home.services.fabrication': 'Custom Fabrication',\n    'home.services.fabrication.desc': 'Precise cutting and shaping according to your specifications',\n    'home.services.installation': 'Professional Installation',\n    'home.services.installation.desc': 'Expert installation by our qualified teams',\n    'home.services.maintenance': 'Maintenance & Restoration',\n    'home.services.maintenance.desc': 'Marble maintenance and restoration services',\n    \n    // Products section\n    'home.products.title': 'Our Premium Marbles',\n    'home.products.calacatta': 'Calacatta Gold',\n    'home.products.calacatta.desc': 'Premium Italian marble with elegant golden veins',\n    'home.products.carrara': 'Carrara White',\n    'home.products.carrara.desc': 'Classic Italian marble of exceptional purity',\n    'home.products.emperador': 'Emperador Dark',\n    'home.products.emperador.desc': 'Spanish marble with rich and deep tones',\n    \n    // Contact section\n    'home.contact.title': 'Contact Us',\n    'home.contact.description': 'Ready to transform your space? Contact our experts for a free consultation.',\n    'home.contact.cta': 'Request a Quote',\n    \n    // Products page\n    'products.cta.description': 'We can source rare and custom marble varieties for your project. Contact us with your requirements.',\n    \n    // Footer\n    'footer.company': 'Company',\n    'footer.services': 'Services',\n    'footer.contact': 'Contact',\n    'footer.rights': 'All rights reserved.',\n    'footer.address': 'Casablanca, Morocco',\n    'footer.phone': 'Phone',\n    'footer.email': 'Email',\n    'footer.newsletter.desc': 'Subscribe to receive updates on new products and projects.',\n    'footer.description': 'Premium marble solutions for luxury spaces. With over 20 years of expertise, we bring timeless elegance to every project.',\n    \n    // Products page\n    'products.subtitle': 'Explore our selection of fine marble varieties from around the world.',\n    \n    // Contact page\n    'contact.title': 'Contact Gromarbre',\n    'contact.subtitle': 'Let\\'s bring your ideas to life together',\n    'contact.form.name': 'Full Name',\n    'contact.form.email': 'Email Address',\n    'contact.form.phone': 'Phone',\n    'contact.form.subject': 'Subject',\n    'contact.form.message': 'Message',\n    'contact.form.submit': 'Send Message',\n    'contact.info.title': 'Contact Information',\n    'contact.info.address': 'Address',\n    'contact.info.hours': 'Business Hours',\n    'contact.info.hours.weekday': 'Mon - Fri: 8:00 AM - 6:00 PM',\n    'contact.info.hours.saturday': 'Sat: 8:00 AM - 2:00 PM',\n    'contact.info.hours.sunday': 'Sun: Closed',\n    'contact.form.title': 'Send Us a Message',\n    'contact.form.sending': 'Sending...',\n    'contact.info.follow': 'Follow Us',\n    \n    // Additional UI elements\n    'ui.viewDetails': 'View Details',\n    'ui.learnMore': 'Learn More',\n    'ui.getQuote': 'Get Quote',\n    'ui.callToAction': 'Ready to Transform Your Space?',\n    'ui.newsletter': 'Newsletter',\n    'ui.subscribe': 'Subscribe',\n    'ui.quickLinks': 'Quick Links',\n  },\n  \n  ar: {\n    // Navigation\n    'nav.home': 'الرئيسية',\n    'nav.services': 'الخدمات',\n    'nav.projects': 'المشاريع',\n    'nav.products': 'المنتجات',\n    'nav.contact': 'اتصل بنا',\n    \n    // Home page\n    'home.hero.title': 'التميز في الرخام منذ 1998',\n    'home.hero.subtitle': 'مبدعو حلول الرخام الفاخر في الدار البيضاء، المغرب. متخصصون في المشاريع المخصصة للفنادق والجامعات والمساكن والمساحات التجارية.',\n    'home.hero.cta': 'اكتشف أعمالنا',\n    'home.hero.cta2': 'خدماتنا',\n    \n    // About section\n    'home.about.title': 'حول جرومربر',\n    'home.about.description': 'مع أكثر من 25 عامًا من الخبرة، جرومربر هي الشركة الرائدة في المغرب لتحويل الرخام. نحن نجمع بين الحرفية التقليدية والتكنولوجيا الحديثة لإنشاء أعمال استثنائية.',\n    'home.about.experience': 'سنة من التميز',\n    'home.about.projects': 'مشروع مكتمل',\n    'home.about.satisfaction': 'رضا العملاء',\n    \n    // Services section\n    'home.services.title': 'خدماتنا',\n    'home.services.design': 'التصميم والتخطيط',\n    'home.services.design.desc': 'خطط مخصصة وتصورات ثلاثية الأبعاد لمشاريعك',\n    'home.services.fabrication': 'التصنيع المخصص',\n    'home.services.fabrication.desc': 'قطع وتشكيل دقيق وفقًا لمواصفاتك',\n    'home.services.installation': 'التركيب المهني',\n    'home.services.installation.desc': 'تركيب متخصص من قبل فرقنا المؤهلة',\n    'home.services.maintenance': 'الصيانة والترميم',\n    'home.services.maintenance.desc': 'خدمات صيانة وترميم الرخام',\n    \n    // Products section\n    'home.products.title': 'رخامنا المميز',\n    'home.products.calacatta': 'كالاكاتا الذهبي',\n    'home.products.calacatta.desc': 'رخام إيطالي فاخر بعروق ذهبية أنيقة',\n    'home.products.carrara': 'كارارا الأبيض',\n    'home.products.carrara.desc': 'رخام إيطالي كلاسيكي بنقاء استثنائي',\n    'home.products.emperador': 'إمبرادور الداكن',\n    'home.products.emperador.desc': 'رخام إسباني بألوان غنية وعميقة',\n    \n    // Contact section\n    'home.contact.title': 'اتصل بنا',\n    'home.contact.description': 'مستعد لتحويل مساحتك؟ اتصل بخبرائنا للحصول على استشارة مجانية.',\n    'home.contact.cta': 'طلب عرض سعر',\n    \n    // Products page\n    'products.cta.description': 'يمكننا توفير أنواع نادرة ومخصصة من الرخام لمشروعك. اتصل بنا مع متطلباتك.',\n    \n    // Footer\n    'footer.company': 'الشركة',\n    'footer.services': 'الخدمات',\n    'footer.contact': 'اتصل بنا',\n    'footer.rights': 'جميع الحقوق محفوظة.',\n    'footer.address': 'الدار البيضاء، المغرب',\n    'footer.phone': 'الهاتف',\n    'footer.email': 'البريد الإلكتروني',\n    'footer.newsletter.desc': 'اشترك لتلقي التحديثات حول المنتجات والمشاريع الجديدة.',\n    'footer.description': 'حلول الرخام الفاخرة للمساحات الراقية. مع أكثر من 20 عاماً من الخبرة، نضفي الأناقة الخالدة على كل مشروع.',\n    \n    // Contact page\n    'contact.title': 'اتصل بجرومربر',\n    'contact.subtitle': 'لنحول أفكارك إلى واقع معًا',\n    'contact.form.name': 'الاسم الكامل',\n    'contact.form.email': 'عنوان البريد الإلكتروني',\n    'contact.form.phone': 'الهاتف',\n    'contact.form.subject': 'الموضوع',\n    'contact.form.message': 'الرسالة',\n    'contact.form.submit': 'إرسال الرسالة',\n    'contact.info.title': 'معلومات الاتصال',\n    'contact.info.address': 'العنوان',\n    'contact.info.hours': 'ساعات العمل',\n    'contact.info.hours.weekday': 'الاثنين - الجمعة: 8:00 ص - 6:00 م',\n    'contact.info.hours.saturday': 'السبت: 8:00 ص - 2:00 م',\n    'contact.info.hours.sunday': 'الأحد: مغلق',\n    'contact.form.title': 'أرسل لنا رسالة',\n    'contact.form.sending': 'جاري الإرسال...',\n    'contact.info.follow': 'تابعونا',\n    \n    // Additional UI elements\n    'ui.viewDetails': 'عرض التفاصيل',\n    'ui.learnMore': 'اعرف المزيد',\n    'ui.getQuote': 'احصل على عرض سعر',\n    'ui.callToAction': 'مستعد لتحويل مساحتك؟',\n    'ui.newsletter': 'النشرة الإخبارية',\n    'ui.subscribe': 'اشترك',\n    'ui.quickLinks': 'روابط سريعة',\n  }\n};","size_bytes":15458},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useScrollReveal.ts":{"content":"import { useEffect, useRef } from \"react\";\n\nexport function useScrollReveal() {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add(\"active\");\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n      {\n        threshold: 0.1,\n      }\n    );\n\n    observer.observe(element);\n\n    return () => {\n      if (element) {\n        observer.unobserve(element);\n      }\n    };\n  }, []);\n\n  return { ref };\n}\n","size_bytes":680},"client/src/lib/constants.ts":{"content":"// Services data\nexport const services = [\n  {\n    id: \"custom-design\",\n    title: \"Custom Design\",\n    description: \"Our team of designers works closely with you to create bespoke marble solutions that perfectly match your vision and requirements.\",\n    longDescription: \"At Gromarbre, we understand that each project is unique. Our design team combines artistic vision with technical expertise to create custom marble designs that elevate your space. We work with you at every step, from initial concept to final implementation, ensuring your vision is brought to life with precision and beauty.\",\n    icon: \"fas fa-pencil-ruler\",\n    image: \"https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?q=80&w=2000\",\n    features: [\n      \"Personalized design consultations\",\n      \"3D modeling and visualization\",\n      \"Material selection guidance\",\n      \"Pattern and inlay design\",\n      \"Integration with existing architectural elements\"\n    ]\n  },\n  {\n    id: \"installation\",\n    title: \"Expert Installation\",\n    description: \"Our skilled craftsmen ensure precise installation of marble surfaces, maintaining the highest standards of quality and finish.\",\n    longDescription: \"The beauty of marble can only be fully realized through expert installation. Our team of experienced professionals brings decades of craftsmanship to every project, ensuring flawless execution from start to finish. We utilize advanced techniques and tools to achieve perfect alignment, seamless joints, and immaculate finishing.\",\n    icon: \"fas fa-hammer\",\n    image: \"https://images.unsplash.com/photo-1581775231124-5f9258fef7b3?q=80&w=2000\",\n    features: [\n      \"Precision cutting and fitting\",\n      \"Structurally sound installation methods\",\n      \"Seamless joints and transitions\",\n      \"Proper substrate preparation\",\n      \"Clean and efficient project execution\"\n    ]\n  },\n  {\n    id: \"restoration\",\n    title: \"Restoration\",\n    description: \"Revitalize existing marble surfaces with our professional restoration services, bringing back their original beauty and luster.\",\n    longDescription: \"Over time, even the finest marble can lose its luster due to wear, staining, or damage. Our restoration services breathe new life into tired or damaged marble surfaces. Using specialized techniques and equipment, we can remove stains, repair cracks, restore shine, and preserve the natural beauty of your marble for years to come.\",\n    icon: \"fas fa-magic\",\n    image: \"https://images.unsplash.com/photo-1636397210916-7c636e461444?q=80&w=2000\",\n    features: [\n      \"Stain removal and treatment\",\n      \"Crack and chip repair\",\n      \"Surface polishing and honing\",\n      \"Sealing and protection\",\n      \"Historical restoration expertise\"\n    ]\n  },\n  {\n    id: \"maintenance\",\n    title: \"Maintenance\",\n    description: \"Preserve the beauty of your marble with our comprehensive maintenance services, ensuring longevity and pristine appearance.\",\n    longDescription: \"Regular maintenance is essential to preserve the beauty and longevity of marble surfaces. Our maintenance programs are tailored to your specific needs and include regular cleaning, sealing, and minor repairs. Our technicians use only the highest quality products and techniques to keep your marble looking its best for generations.\",\n    icon: \"fas fa-tools\",\n    image: \"https://images.unsplash.com/photo-1574966739987-65e1952f7ae3?q=80&w=2000\",\n    features: [\n      \"Scheduled maintenance programs\",\n      \"Deep cleaning and polishing\",\n      \"Re-sealing and protection\",\n      \"Preventative care\",\n      \"Expert advice on daily care\"\n    ]\n  },\n  {\n    id: \"sourcing\",\n    title: \"Supply & Sourcing\",\n    description: \"Access the finest marble varieties from around the world through our extensive sourcing network and importing services.\",\n    longDescription: \"Through our global network of quarries and suppliers, we offer access to the world's most exquisite marble varieties. Whether you're looking for classic Carrara white, dramatic Nero Marquina, or rare exotic marble, our sourcing team can procure the perfect material for your project. We personally select each slab to ensure the highest quality and most striking patterns.\",\n    icon: \"fas fa-truck\",\n    image: \"https://images.unsplash.com/photo-1611757228039-e938e2e6baa1?q=80&w=2000\",\n    features: [\n      \"Direct relationships with premium quarries\",\n      \"Rare and exotic marble procurement\",\n      \"Quality assurance and selection\",\n      \"Competitive pricing\",\n      \"Efficient logistics and delivery\"\n    ]\n  },\n  {\n    id: \"consultation\",\n    title: \"Consultation\",\n    description: \"Our experts provide professional guidance on marble selection, application, and care to ensure the best outcomes for your project.\",\n    longDescription: \"Before any project begins, our consultation service helps you make informed decisions that align with your vision, budget, and practical requirements. Our experts will discuss your goals, assess your space, recommend suitable materials, and provide detailed project planning. This foundational step ensures a smooth process and exceptional results.\",\n    icon: \"fas fa-clipboard-check\",\n    image: \"https://images.unsplash.com/photo-1556761175-5973dc0f32e7?q=80&w=2000\",\n    features: [\n      \"Material selection guidance\",\n      \"Budget planning and cost estimation\",\n      \"Project timeline development\",\n      \"Technical feasibility assessment\",\n      \"Maintenance and care education\"\n    ]\n  }\n];\n\n// Projects data\nexport const projects = [\n  {\n    id: \"royal-mansour\",\n    title: \"Royal Mansour Hotel\",\n    description: \"Luxury marble installations throughout common areas and guest suites.\",\n    longDescription: \"For this prestigious hotel in Marrakech, we installed over 5,000 square meters of premium marble throughout the property. The project included custom-designed flooring patterns in the grand lobby, elegant bathroom surfaces in all guest suites, and striking feature walls in the spa area. Our team worked closely with the hotel's interior designers to create a cohesive luxury aesthetic that honors Moroccan architectural traditions while incorporating contemporary design elements.\",\n    image: \"https://images.unsplash.com/photo-1560185007-5f0bb1866cab?q=80&w=2000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1560185007-5f0bb1866cab?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1631048500963-3f5f50f139b3?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1560448204-603b3fc33ddc?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1560185008-a33f5c5d8520?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1560448082-4d6eb46beb68?q=80&w=2000\"\n    ],\n    client: \"Royal Mansour Hotel Group\",\n    location: \"Marrakech, Morocco\",\n    completionDate: \"June 2019\",\n    category: \"Hotel\",\n    services: [\"Custom Design\", \"Installation\", \"Maintenance\"],\n    materials: [\"calacatta-gold\", \"emperador-dark\", \"crema-marfil\"]\n  },\n  {\n    id: \"villa-oceana\",\n    title: \"Villa Oceana\",\n    description: \"Custom marble flooring, countertops, and architectural elements in luxury residence.\",\n    longDescription: \"This exclusive beachfront residence in Casablanca features our finest marble craftsmanship throughout its 1,200 square meter floor plan. Working with renowned architect Hassan El Fassi, we created seamless marble flooring with custom inlays, dramatic bookmatched marble feature walls, and meticulously crafted bathroom surfaces. The centerpiece of the project is a monumental spiral staircase crafted from a single block of Statuario marble, showcasing our exceptional stone carving expertise.\",\n    image: \"https://images.unsplash.com/photo-1600607686527-6fb886090705?q=80&w=2000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1600607686527-6fb886090705?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1600566752355-35792bedcfea?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1600585152220-90363fe7e115?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1600607687920-4e2a09cf159d?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1600210492493-0946911123ea?q=80&w=2000\"\n    ],\n    client: \"Private Residence\",\n    location: \"Casablanca, Morocco\",\n    completionDate: \"October 2021\",\n    category: \"Residential\",\n    services: [\"Custom Design\", \"Installation\", \"Consultation\"],\n    materials: [\"statuario\", \"calacatta-gold\", \"nero-marquina\"]\n  },\n  {\n    id: \"university-casablanca\",\n    title: \"University of Casablanca\",\n    description: \"Grand entrance hall and administrative offices featuring premium marble finishes.\",\n    longDescription: \"The renovation of this historic educational institution required a delicate balance between preserving architectural heritage and introducing modern elegance. For the 800 square meter entrance hall, we created a custom marble floor design that incorporates the university's emblem. The administrative wing features wall cladding in elegant Emperador marble, creating a distinguished atmosphere for faculty offices. We also restored original marble elements dating back to the 1940s, preserving their historical significance while enhancing their appearance.\",\n    image: \"https://images.unsplash.com/photo-1604014056465-b3e0f842652b?q=80&w=2000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1604014056465-b3e0f842652b?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1497366811353-6870744d04b2?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1497366754035-f200968a6e72?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1498335746477-0c73d7353a07?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1544717305-996b815c338c?q=80&w=2000\"\n    ],\n    client: \"University of Casablanca\",\n    location: \"Casablanca, Morocco\",\n    completionDate: \"August 2020\",\n    category: \"Educational\",\n    services: [\"Installation\", \"Restoration\", \"Maintenance\"],\n    materials: [\"emperador-dark\", \"carrara-white\", \"crema-marfil\"]\n  },\n  {\n    id: \"atlas-financial\",\n    title: \"Atlas Financial Headquarters\",\n    description: \"Premium marble finishes for corporate headquarters lobby and executive floors.\",\n    longDescription: \"For this leading financial institution's headquarters in Rabat, we provided comprehensive marble solutions that reflect the company's prestigious status. The 600 square meter main lobby features a dramatic floor pattern using three contrasting marble varieties, while the executive floor incorporates elegant marble wall cladding and custom conference tables. The project required precise scheduling and coordination to meet the client's tight timeline while maintaining our quality standards.\",\n    image: \"https://images.unsplash.com/photo-1577412647305-991150c7d163?q=80&w=2000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1577412647305-991150c7d163?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1462826303086-329426d1aef5?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1497366216548-37526070297c?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1577412647097-a55bb07f03ec?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1464029902023-f42eba355bde?q=80&w=2000\"\n    ],\n    client: \"Atlas Financial Group\",\n    location: \"Rabat, Morocco\",\n    completionDate: \"January 2022\",\n    category: \"Commercial\",\n    services: [\"Custom Design\", \"Installation\", \"Consultation\"],\n    materials: [\"nero-marquina\", \"carrara-white\", \"emperador-dark\"]\n  },\n  {\n    id: \"sofitel-casablanca\",\n    title: \"Sofitel Casablanca\",\n    description: \"Complete marble renovation for luxury hotel bathrooms and spa facilities.\",\n    longDescription: \"This comprehensive renovation project for Sofitel Casablanca involved upgrading all 250 guest bathrooms and the hotel's 1,200 square meter spa facility. Working within the constraints of an operational hotel, our team developed a phased installation plan that minimized disruption while maintaining the highest quality standards. The bathroom designs incorporate three complementary marble varieties in each space, creating a sophisticated aesthetic that elevates the guest experience.\",\n    image: \"https://images.unsplash.com/photo-1574643156929-51fa098b0394?q=80&w=2000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1574643156929-51fa098b0394?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1578683010236-d716f9a3f461?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1445991842772-097fea258e7b?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1564540586988-aa4e53c3d799?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1584132915807-fd1f5fbc078f?q=80&w=2000\"\n    ],\n    client: \"Accor Hotels Group\",\n    location: \"Casablanca, Morocco\",\n    completionDate: \"March 2020\",\n    category: \"Hotel\",\n    services: [\"Installation\", \"Restoration\", \"Maintenance\"],\n    materials: [\"calacatta-gold\", \"thassos-white\", \"emperador-dark\"]\n  },\n  {\n    id: \"grand-mosque\",\n    title: \"Hassan II Mosque Restoration\",\n    description: \"Specialized marble restoration for historic religious landmark.\",\n    longDescription: \"We were honored to be selected for the delicate restoration of marble elements within this iconic mosque, one of the largest in Africa. The project involved cleaning and restoring over 2,500 square meters of marble surfaces, replacing damaged tiles with matching historical materials, and applying specialized protective treatments appropriate for high-traffic areas. Our team worked closely with heritage conservation experts to ensure all work met international preservation standards.\",\n    image: \"https://images.unsplash.com/photo-1525480122447-64809d765ec4?q=80&w=2000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1525480122447-64809d765ec4?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1481379340298-3419f9ebb925?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1519998203158-48b796d5cbbb?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1512632578888-169bbbc64f33?q=80&w=2000\",\n      \"https://images.unsplash.com/photo-1539895515595-43542d33f10b?q=80&w=2000\"\n    ],\n    client: \"Ministry of Religious Affairs\",\n    location: \"Casablanca, Morocco\",\n    completionDate: \"December 2021\",\n    category: \"Cultural\",\n    services: [\"Restoration\", \"Maintenance\", \"Consultation\"],\n    materials: [\"carrara-white\", \"verde-alpi\", \"crema-marfil\"]\n  }\n];\n\n// Products data\nexport const products = [\n  {\n    id: \"carrara-white\",\n    name: \"Carrara White\",\n    shortDescription: \"Classic Italian white marble with subtle gray veining.\",\n    description: \"Carrara marble is one of the most recognized and widely used marbles in the world, quarried from the Apuan Alps in northern Tuscany, Italy. Its characteristic look features a white to blue-gray background with soft, feathery gray veining. The delicate, refined appearance makes it perfect for elegant spaces and has been the choice of sculptors and architects for centuries, including Michelangelo for his iconic 'David' sculpture. Our Carrara White selection is carefully curated for consistency in color and pattern, offering timeless beauty that complements both traditional and contemporary designs.\",\n    image: \"/images/marble/carrara-white.svg\",\n    gallery: [\n      \"/images/marble/carrara-white.svg\",\n      \"https://images.unsplash.com/photo-1599865278479-3ced2f7093b9?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1618221118493-9cfa74f772fb?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1615876234886-fd9a39fda97f?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1608501078713-8e445a709b39?q=80&w=1000\"\n    ],\n    category: \"White\",\n    origin: \"Carrara, Italy\",\n    finishes: [\"Polished\", \"Honed\", \"Brushed\", \"Sandblasted\"],\n    applications: [\n      \"Flooring\",\n      \"Wall Cladding\",\n      \"Countertops\",\n      \"Vanities\",\n      \"Shower Surfaces\"\n    ],\n    priceRange: \"$$\"\n  },\n  {\n    id: \"calacatta-gold\",\n    name: \"Calacatta Gold\",\n    shortDescription: \"Luxurious Italian marble with distinctive gold veining.\",\n    description: \"Calacatta Gold is among the most precious and sought-after marbles in the world, known for its distinctive appearance featuring a bright white background traversed by dramatic gold and gray veins. Quarried in the Apuan Mountains of Carrara, Italy, each slab is unique with its own pattern and character. The bold veining creates magnificent visual impact in any space, making it ideal for statement pieces and luxury installations. Our premium selection ensures the most dramatic and beautiful patterns, perfect for creating unforgettable spaces that exude opulence and refinement.\",\n    image: \"/images/marble/calacatta-gold.svg\",\n    gallery: [\n      \"/images/marble/calacatta-gold.svg\",\n      \"https://images.unsplash.com/photo-1608501140719-01427024c249?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1608501392041-30e293ab616a?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1604335399105-a0c585fd81a1?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1513161455079-7dc1de15ef3e?q=80&w=1000\"\n    ],\n    category: \"White\",\n    origin: \"Carrara, Italy\",\n    finishes: [\"Polished\", \"Honed\", \"Leather\"],\n    applications: [\n      \"Luxury Countertops\",\n      \"Feature Walls\",\n      \"Premium Flooring\",\n      \"Bathroom Surfaces\",\n      \"Fireplace Surrounds\"\n    ],\n    priceRange: \"$$$$\"\n  },\n  {\n    id: \"emperador-dark\",\n    name: \"Emperador Dark\",\n    shortDescription: \"Rich Spanish brown marble with dramatic veining patterns.\",\n    description: \"Emperador Dark is a distinguished marble from Spain characterized by its rich brown background and contrasting lighter veins. The deep, warm coloration creates a sense of luxury and sophistication that works exceptionally well in both traditional and contemporary settings. This versatile stone is known for its consistent quality and durability, making it suitable for a wide range of applications. Our selection features the finest examples with balanced veining and depth of color, offering timeless elegance that creates warmth and character in any interior.\",\n    image: \"/images/marble/emperador-dark.svg\",\n    gallery: [\n      \"/images/marble/emperador-dark.svg\",\n      \"https://images.unsplash.com/photo-1563136212-6b3c72118d14?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1609588564941-5011e3f06aee?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1508022835786-5699f4884dc7?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1608501140719-01427024c249?q=80&w=1000\"\n    ],\n    category: \"Brown\",\n    origin: \"Spain\",\n    finishes: [\"Polished\", \"Honed\", \"Brushed\"],\n    applications: [\n      \"Flooring\",\n      \"Wall Cladding\",\n      \"Countertops\",\n      \"Furniture\",\n      \"Architectural Elements\"\n    ],\n    priceRange: \"$$$\"\n  },\n  {\n    id: \"statuario\",\n    name: \"Statuario\",\n    shortDescription: \"Premium white Italian marble with bold, dramatic veining.\",\n    description: \"Statuario marble is considered one of the most exquisite white marbles available, prized for its luminous white background and bold, dramatic veining in gray and gold tones. Quarried from the same region as Carrara but much rarer, Statuario has been used in masterpieces of sculpture and architecture throughout history. Each slab offers unique veining patterns that can be bookmatched to create stunning symmetrical designs. Our premium Statuario selection represents the highest quality, with exceptional brightness and distinctive veining that makes a dramatic statement in any luxury installation.\",\n    image: \"https://images.unsplash.com/photo-1604335400145-99f0122002f1?q=80&w=1000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1604335400145-99f0122002f1?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1614684094216-6394cd73cf97?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1604335399105-a0c585fd81a1?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1624286308169-28c7ad40f3c4?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1632081269768-6a198d81a102?q=80&w=1000\"\n    ],\n    category: \"White\",\n    origin: \"Carrara, Italy\",\n    finishes: [\"Polished\", \"Honed\"],\n    applications: [\n      \"Luxury Countertops\",\n      \"Statement Walls\",\n      \"High-End Flooring\",\n      \"Bathroom Surfaces\",\n      \"Custom Furniture\"\n    ],\n    priceRange: \"$$$$\"\n  },\n  {\n    id: \"nero-marquina\",\n    name: \"Nero Marquina\",\n    shortDescription: \"Sophisticated Spanish black marble with crisp white veining.\",\n    description: \"Nero Marquina is a striking black marble from the Basque region of Spain, celebrated for its intense black background contrasted with distinctive white veining. This dramatic color combination creates a bold, sophisticated aesthetic that can serve as either a stunning focal point or an elegant complement in any design scheme. The high contrast and visual impact of Nero Marquina make it particularly effective for creating dramatic elements within a space. Our selection features the finest quality with consistent coloration and well-defined veining patterns for maximum visual impact.\",\n    image: \"https://images.unsplash.com/photo-1586798784269-121125e952df?q=80&w=1000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1586798784269-121125e952df?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1596825382918-4ba923fef1b3?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1596825381115-00298b822bc5?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1588593956651-114fb0ecabc5?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1576941089067-2de3c901e126?q=80&w=1000\"\n    ],\n    category: \"Black\",\n    origin: \"Markina, Spain\",\n    finishes: [\"Polished\", \"Honed\", \"Leather\"],\n    applications: [\n      \"Feature Walls\",\n      \"Flooring\",\n      \"Countertops\",\n      \"Bathroom Surfaces\",\n      \"Decorative Elements\"\n    ],\n    priceRange: \"$$$\"\n  },\n  {\n    id: \"crema-marfil\",\n    name: \"Crema Marfil\",\n    shortDescription: \"Elegant Spanish cream marble with subtle veining.\",\n    description: \"Crema Marfil is a classic cream-colored marble from the region of Alicante, Spain, featuring a warm beige background with soft veining in amber, beige, and yellow tones. Its subtle, sophisticated appearance creates an atmosphere of warmth and tranquility, making it exceptionally versatile for a wide range of design styles from traditional to contemporary. The consistent coloration and relatively uniform appearance make it ideal for large installations where continuity is desired. Our selection offers premium quality with minimal imperfections and a consistent cream tone that brightens and warms any space.\",\n    image: \"https://images.unsplash.com/photo-1608501140678-85296eb833f1?q=80&w=1000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1608501140678-85296eb833f1?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1604335399712-72e43b1cd2b9?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1608501140843-a8720c12359c?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1608501078689-69dfcb57f5de?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1603203040743-24aced6793b4?q=80&w=1000\"\n    ],\n    category: \"Beige\",\n    origin: \"Alicante, Spain\",\n    finishes: [\"Polished\", \"Honed\", \"Brushed\"],\n    applications: [\n      \"Flooring\",\n      \"Wall Cladding\",\n      \"Countertops\",\n      \"Bathroom Surfaces\",\n      \"Moldings and Trim\"\n    ],\n    priceRange: \"$$\"\n  },\n  {\n    id: \"thassos-white\",\n    name: \"Thassos White\",\n    shortDescription: \"Pure white Greek marble known for its exceptional clarity.\",\n    description: \"Thassos White is a premium Greek marble renowned for its exceptional purity and crystalline white appearance with minimal veining. Quarried on the island of Thassos in the northern Aegean Sea, this distinctive stone offers a clean, bright aesthetic unlike any other natural marble. Its consistent white coloration makes it perfect for creating serene, minimalist spaces and for contrasting with bolder materials. Our Thassos selection represents the highest quality, featuring exceptional whiteness, consistent texture, and excellent light reflectivity that brings a luminous quality to any installation.\",\n    image: \"https://images.unsplash.com/photo-1616046162291-17f8b0cc3280?q=80&w=1000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1616046162291-17f8b0cc3280?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1610992499643-9cadc508fb9e?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1619828359021-6b7f4fdc9212?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1620332372374-f108c53d2504?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1588058365815-c9a3a39d366d?q=80&w=1000\"\n    ],\n    category: \"White\",\n    origin: \"Thassos, Greece\",\n    finishes: [\"Polished\", \"Honed\", \"Sandblasted\"],\n    applications: [\n      \"Luxury Bathroom Surfaces\",\n      \"Mosaic and Inlay Work\",\n      \"Backsplashes\",\n      \"Decorative Elements\",\n      \"Light Features\"\n    ],\n    priceRange: \"$$$$\"\n  },\n  {\n    id: \"verde-alpi\",\n    name: \"Verde Alpi\",\n    shortDescription: \"Distinctive Italian green marble with white and gray veining.\",\n    description: \"Verde Alpi is a striking green marble quarried in the Alpine region of northern Italy, characterized by its deep forest green background interlaced with dramatic white and gray veining. This distinctive stone brings a powerful natural element to any space, creating a strong connection to the earthen beauty of the mountains from which it originates. The rich coloration and dramatic patterning make it ideal for creating statement pieces that become the focal point of a design. Our selection features the most vibrant coloration and interesting veining patterns for maximum visual impact in luxury installations.\",\n    image: \"https://images.unsplash.com/photo-1557293972-4888fca119b5?q=80&w=1000\",\n    gallery: [\n      \"https://images.unsplash.com/photo-1557293972-4888fca119b5?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1589582424475-dcc788df77e9?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1562188804-8d2bbe5c7aa8?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1588593956898-63deedde0752?q=80&w=1000\",\n      \"https://images.unsplash.com/photo-1614684094303-9eaa18870b8d?q=80&w=1000\"\n    ],\n    category: \"Colored\",\n    origin: \"Italian Alps\",\n    finishes: [\"Polished\", \"Honed\", \"Brushed\"],\n    applications: [\n      \"Feature Walls\",\n      \"Accent Pieces\",\n      \"Furniture\",\n      \"Decorative Elements\",\n      \"Luxury Commercial Spaces\"\n    ],\n    priceRange: \"$$$\"\n  }\n];\n\n// Clients data\nexport const clients = [\n  {\n    id: \"client1\",\n    name: \"Royal Mansour Hotel\",\n    icon: \"fas fa-hotel\"\n  },\n  {\n    id: \"client2\",\n    name: \"Sofitel Group\",\n    icon: \"fas fa-building\"\n  },\n  {\n    id: \"client3\",\n    name: \"University of Casablanca\",\n    icon: \"fas fa-university\"\n  },\n  {\n    id: \"client4\",\n    name: \"Atlas Financial Group\",\n    icon: \"fas fa-landmark\"\n  },\n  {\n    id: \"client5\",\n    name: \"Ministry of Cultural Affairs\",\n    icon: \"fas fa-mosque\"\n  },\n  {\n    id: \"client6\",\n    name: \"Casablanca Residences\",\n    icon: \"fas fa-home\"\n  }\n];\n","size_bytes":27144},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/types.ts":{"content":"export interface Service {\n  id: string;\n  title: string;\n  description: string;\n  longDescription: string;\n  icon: string;\n  image: string;\n  features: string[];\n}\n\nexport interface Project {\n  id: string;\n  title: string;\n  description: string;\n  longDescription: string;\n  image: string;\n  gallery: string[];\n  client: string;\n  location: string;\n  completionDate: string;\n  category: string;\n  services: string[];\n  materials: string[];\n}\n\nexport interface Product {\n  id: string;\n  name: string;\n  shortDescription: string;\n  description: string;\n  image: string;\n  gallery: string[];\n  category: string;\n  origin: string;\n  finishes: string[];\n  applications: string[];\n  priceRange?: string;\n}\n\nexport interface Client {\n  id: string;\n  name: string;\n  icon: string;\n}\n\nexport interface ContactFormData {\n  name: string;\n  email: string;\n  phone: string;\n  message: string;\n}\n","size_bytes":883},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function truncateText(text: string, length: number = 100): string {\n  if (text.length <= length) return text;\n  return text.slice(0, length) + \"...\";\n}\n\nexport function formatDate(date: string): string {\n  return new Date(date).toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n}\n","size_bytes":503},"client/src/pages/ContactPage.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  phone: z.string().min(5, { message: \"Please enter a valid phone number\" }),\n  subject: z.string().min(2, { message: \"Subject is required\" }),\n  message: z.string().min(10, { message: \"Message must be at least 10 characters\" }),\n});\n\ntype ContactFormValues = z.infer<typeof contactFormSchema>;\n\nconst ContactPage = () => {\n  const { toast } = useToast();\n  const { t } = useLanguage();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<ContactFormValues>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ContactFormValues) => {\n    setIsSubmitting(true);\n    try {\n      await apiRequest(\"POST\", \"/api/contact\", data);\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for your message. We'll get back to you soon.\",\n      });\n      reset();\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"There was a problem sending your message. Please try again.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Contact Us | Gromarbre</title>\n        <meta name=\"description\" content=\"Get in touch with Gromarbre for all your luxury marble needs. Request a quote or consultation for your project.\" />\n      </Helmet>\n      <main>\n        {/* Hero Section */}\n        <section className=\"relative py-20 bg-blue-dark\">\n          <div className=\"absolute inset-0 overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1565538810643-b5bdb714032a?q=80&w=2000\" \n              alt=\"Marble Close-up\" \n              className=\"w-full h-full object-cover opacity-20\"\n            />\n          </div>\n          <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h1 className=\"text-4xl sm:text-5xl font-serif font-bold text-white mb-4\">\n                {t('contact.title')}\n              </h1>\n              <div className=\"w-24 h-1 bg-gold mx-auto my-6\"></div>\n              <p className=\"max-w-2xl mx-auto text-lg text-gray-300\">\n                {t('contact.subtitle')}\n              </p>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Contact Info and Form */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"lg:flex lg:space-x-12\">\n              {/* Contact Information */}\n              <div className=\"lg:w-1/3 mb-12 lg:mb-0\">\n                <div className=\"bg-blue-dark text-white p-8 rounded-lg shadow-md mb-8\">\n                  <h2 className=\"text-2xl font-serif font-bold mb-6\">{t('contact.info.title')}</h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-start\">\n                      <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                        <i className=\"fas fa-map-marker-alt\"></i>\n                      </div>\n                      <div className=\"ml-3\">\n                        <h3 className=\"font-medium\">{t('contact.info.address')}</h3>\n                        <p className=\"mt-1 text-gray-300\">\n                          321 Avenue Mohammed V<br />\n                          {t('footer.address')}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start\">\n                      <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                        <i className=\"fas fa-phone-alt\"></i>\n                      </div>\n                      <div className=\"ml-3\">\n                        <h3 className=\"font-medium\">{t('footer.phone')}</h3>\n                        <p className=\"mt-1 text-gray-300\">\n                          +212-5xx-xxxxxx<br />\n                          {t('contact.info.hours.weekday')}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start\">\n                      <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                        <i className=\"fas fa-envelope\"></i>\n                      </div>\n                      <div className=\"ml-3\">\n                        <h3 className=\"font-medium\">{t('footer.email')}</h3>\n                        <p className=\"mt-1 text-gray-300\">\n                          info@gromarbre.ma<br />\n                          sales@gromarbre.ma\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-8 pt-8 border-t border-blue-light border-opacity-30\">\n                    <h3 className=\"font-medium mb-4\">Follow Us</h3>\n                    <div className=\"flex space-x-4\">\n                      <a href=\"#\" className=\"text-white hover:text-gold\" aria-label=\"Facebook\">\n                        <i className=\"fab fa-facebook-f text-xl\"></i>\n                      </a>\n                      <a href=\"#\" className=\"text-white hover:text-gold\" aria-label=\"Instagram\">\n                        <i className=\"fab fa-instagram text-xl\"></i>\n                      </a>\n                      <a href=\"#\" className=\"text-white hover:text-gold\" aria-label=\"LinkedIn\">\n                        <i className=\"fab fa-linkedin-in text-xl\"></i>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-50 p-8 rounded-lg shadow-md\">\n                  <h2 className=\"text-2xl font-serif font-bold mb-6 text-charcoal\">{t('contact.info.hours')}</h2>\n                  <ul className=\"space-y-3\">\n                    <li className=\"flex justify-between\">\n                      <span>{t('contact.info.hours.weekday')}</span>\n                    </li>\n                    <li className=\"flex justify-between\">\n                      <span>{t('contact.info.hours.saturday')}</span>\n                    </li>\n                    <li className=\"flex justify-between\">\n                      <span>{t('contact.info.hours.sunday')}</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              \n              {/* Contact Form */}\n              <div className=\"lg:w-2/3\">\n                <div className=\"bg-white p-8 rounded-lg shadow-md\">\n                  <h2 className=\"text-2xl font-serif font-bold mb-6 text-charcoal\">{t('contact.form.title')}</h2>\n                  \n                  <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                      <div>\n                        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.name')}*</label>\n                        <input \n                          type=\"text\" \n                          id=\"name\" \n                          className={`w-full px-4 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                          placeholder={t('contact.form.name')}\n                          {...register(\"name\")}\n                        />\n                        {errors.name && (\n                          <p className=\"mt-1 text-red-500 text-xs\">{errors.name.message}</p>\n                        )}\n                      </div>\n                      <div>\n                        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.email')}*</label>\n                        <input \n                          type=\"email\" \n                          id=\"email\" \n                          className={`w-full px-4 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                          placeholder={t('contact.form.email')}\n                          {...register(\"email\")}\n                        />\n                        {errors.email && (\n                          <p className=\"mt-1 text-red-500 text-xs\">{errors.email.message}</p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                      <div>\n                        <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.phone')}*</label>\n                        <input \n                          type=\"tel\" \n                          id=\"phone\" \n                          className={`w-full px-4 py-2 border ${errors.phone ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                          placeholder={t('contact.form.phone')}\n                          {...register(\"phone\")}\n                        />\n                        {errors.phone && (\n                          <p className=\"mt-1 text-red-500 text-xs\">{errors.phone.message}</p>\n                        )}\n                      </div>\n                      <div>\n                        <label htmlFor=\"subject\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.subject')}*</label>\n                        <input \n                          type=\"text\" \n                          id=\"subject\" \n                          className={`w-full px-4 py-2 border ${errors.subject ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                          placeholder={t('contact.form.subject')}\n                          {...register(\"subject\")}\n                        />\n                        {errors.subject && (\n                          <p className=\"mt-1 text-red-500 text-xs\">{errors.subject.message}</p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"mb-6\">\n                      <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.message')}*</label>\n                      <textarea \n                        id=\"message\" \n                        rows={6} \n                        className={`w-full px-4 py-2 border ${errors.message ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                        placeholder={t('contact.form.message')}\n                        {...register(\"message\")}\n                      ></textarea>\n                      {errors.message && (\n                        <p className=\"mt-1 text-red-500 text-xs\">{errors.message.message}</p>\n                      )}\n                    </div>\n                    \n                    <button \n                      type=\"submit\" \n                      className=\"w-full bg-gold text-white py-3 px-6 rounded-md hover:bg-gold-dark transition-colors disabled:opacity-70\"\n                      disabled={isSubmitting}\n                    >\n                      {isSubmitting ? (\n                        <span className=\"flex items-center justify-center\">\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i> Sending...\n                        </span>\n                      ) : t('contact.form.submit')}\n                    </button>\n                  </form>\n                </div>\n                \n                {/* Map */}\n                <div className=\"mt-8 rounded-lg overflow-hidden shadow-md h-[400px]\">\n                  <iframe \n                    src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d106376.72691566196!2d-7.669966069658781!3d33.57240330064237!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0xda7cd4778aa113b%3A0xb06c1d84f310fd3!2sCasablanca%2C%20Morocco!5e0!3m2!1sen!2sus!4v1660488764201!5m2!1sen!2sus\" \n                    width=\"100%\" \n                    height=\"100%\" \n                    style={{ border: 0 }} \n                    allowFullScreen \n                    loading=\"lazy\" \n                    referrerPolicy=\"no-referrer-when-downgrade\"\n                    title=\"Gromarbre Location\"\n                  ></iframe>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default ContactPage;\n","size_bytes":13431},"client/src/pages/HomePage.tsx":{"content":"import { Helmet } from \"react-helmet\";\nimport Hero from \"@/components/home/Hero\";\nimport About from \"@/components/home/About\";\nimport Services from \"@/components/home/Services\";\nimport Projects from \"@/components/home/Projects\";\nimport Products from \"@/components/home/Products\";\nimport Clients from \"@/components/home/Clients\";\nimport Contact from \"@/components/home/Contact\";\n\nconst HomePage = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Gromarbre | Luxury Marble Solutions</title>\n        <meta name=\"description\" content=\"Gromarbre is a leading marble company in Casablanca, Morocco specializing in luxury marble projects for over 20 years.\" />\n      </Helmet>\n      <main>\n        <Hero />\n        <About />\n        <Services />\n        <Projects />\n        <Products />\n        <Clients />\n        <Contact />\n      </main>\n    </>\n  );\n};\n\nexport default HomePage;\n","size_bytes":884},"client/src/pages/ProductDetailPage.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useRoute, Link } from \"wouter\";\nimport { Helmet } from \"react-helmet\";\nimport { motion } from \"framer-motion\";\nimport { products, projects } from \"@/lib/constants\";\nimport { Product } from \"@/lib/types\";\n\nconst ProductDetailPage = () => {\n  const [, params] = useRoute(\"/products/:id\");\n  const [product, setProduct] = useState<Product | null>(null);\n  const [selectedImage, setSelectedImage] = useState<string>(\"\");\n  const [relatedProjects, setRelatedProjects] = useState([]);\n\n  useEffect(() => {\n    if (params && params.id) {\n      const foundProduct = products.find(p => p.id === params.id);\n      if (foundProduct) {\n        setProduct(foundProduct);\n        setSelectedImage(foundProduct.gallery[0]);\n        \n        // Find projects that use this marble type\n        const related = projects.filter(project => \n          project.materials.includes(foundProduct.id)\n        ).slice(0, 3);\n        \n        setRelatedProjects(related);\n      }\n    }\n  }, [params]);\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-serif font-bold mb-4\">Product Not Found</h2>\n          <p className=\"text-gray-600 mb-6\">The marble product you're looking for doesn't exist or has been removed.</p>\n          <Link href=\"/products\">\n            <a className=\"inline-block px-6 py-3 bg-gold text-white rounded-md hover:bg-gold-dark transition-colors\">\n              Back to Products\n            </a>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{product.name} Marble | Gromarbre Products</title>\n        <meta name=\"description\" content={product.shortDescription} />\n      </Helmet>\n      <main>\n        {/* Hero Section */}\n        <section className=\"relative py-20 bg-blue-dark\">\n          <div className=\"absolute inset-0 overflow-hidden\">\n            <img \n              src={product.image} \n              alt={product.name} \n              className=\"w-full h-full object-cover opacity-30\"\n            />\n          </div>\n          <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <span className=\"inline-block px-4 py-1 bg-gold text-white text-sm rounded-full mb-4\">\n                {product.category}\n              </span>\n              <h1 className=\"text-4xl sm:text-5xl font-serif font-bold text-white mb-4\">\n                {product.name}\n              </h1>\n              <div className=\"w-24 h-1 bg-gold mx-auto my-6\"></div>\n              <p className=\"max-w-2xl mx-auto text-lg text-gray-300\">\n                {product.shortDescription}\n              </p>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Product Details */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"lg:flex lg:gap-12\">\n              {/* Product Gallery */}\n              <div className=\"lg:w-2/3 mb-10 lg:mb-0\">\n                <div className=\"bg-gray-900 rounded-lg overflow-hidden mb-6\">\n                  <img \n                    src={selectedImage || product.image} \n                    alt={product.name} \n                    className=\"w-full h-[500px] object-cover object-center\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-5 gap-4\">\n                  {product.gallery.map((img, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setSelectedImage(img)}\n                      className={`h-20 rounded-md overflow-hidden transition-all ${\n                        selectedImage === img ? 'ring-4 ring-gold' : 'opacity-70 hover:opacity-100'\n                      }`}\n                    >\n                      <img \n                        src={img} \n                        alt={`Gallery ${index + 1}`} \n                        className=\"w-full h-full object-cover\"\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              {/* Product Info */}\n              <div className=\"lg:w-1/3\">\n                <div className=\"bg-gray-50 p-8 rounded-lg shadow-md\">\n                  <h2 className=\"text-2xl font-serif font-bold mb-6 text-charcoal\">Product Details</h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Origin</h3>\n                      <p className=\"mt-1 text-lg text-charcoal\">{product.origin}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Available Finishes</h3>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {product.finishes.map((finish, index) => (\n                          <span \n                            key={index} \n                            className=\"inline-block px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full\"\n                          >\n                            {finish}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Applications</h3>\n                      <ul className=\"mt-1 space-y-1 text-charcoal\">\n                        {product.applications.map((application, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <i className=\"fas fa-check text-gold mt-1 mr-2\"></i>\n                            <span>{application}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    {product.priceRange && (\n                      <div>\n                        <h3 className=\"text-sm font-medium text-gray-500\">Price Range</h3>\n                        <p className=\"mt-1 text-lg font-semibold text-charcoal\">{product.priceRange}</p>\n                      </div>\n                    )}\n                    \n                    <div className=\"pt-4 mt-6 border-t border-gray-200\">\n                      <Link href=\"/contact\">\n                        <a className=\"w-full block text-center px-6 py-3 bg-gold text-white rounded-md hover:bg-gold-dark transition-colors\">\n                          Request Quote\n                        </a>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Product Description */}\n            <div className=\"mt-16\">\n              <h2 className=\"text-3xl font-serif font-bold mb-6 text-charcoal\">About {product.name}</h2>\n              <div className=\"prose prose-lg max-w-none\">\n                <p>{product.description}</p>\n              </div>\n            </div>\n            \n            {/* Related Projects */}\n            {relatedProjects.length > 0 && (\n              <div className=\"mt-16\">\n                <h2 className=\"text-3xl font-serif font-bold mb-8 text-charcoal\">Projects Using This Marble</h2>\n                <div className=\"grid md:grid-cols-3 gap-8\">\n                  {relatedProjects.map((project) => (\n                    <div key={project.id} className=\"project-card rounded-lg overflow-hidden shadow-lg group\">\n                      <div className=\"relative h-64\">\n                        <img \n                          src={project.image} \n                          alt={project.title} \n                          className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                        />\n                        <div className=\"project-overlay absolute inset-0 bg-blue-dark bg-opacity-70 opacity-0 transition-opacity duration-300 flex flex-col justify-end p-6\">\n                          <div className=\"text-white\">\n                            <h3 className=\"text-xl font-serif font-bold\">{project.title}</h3>\n                            <Link href={`/projects/${project.id}`}>\n                              <a className=\"mt-2 inline-block text-gold hover:underline\">\n                                View Project <i className=\"fas fa-arrow-right ml-1\"></i>\n                              </a>\n                            </Link>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"p-6\">\n                        <h3 className=\"font-serif text-xl font-bold text-charcoal\">{project.title}</h3>\n                        <p className=\"mt-2 text-gray-600\">{project.location}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* Navigation */}\n            <div className=\"mt-16 border-t border-gray-200 pt-8 flex flex-col sm:flex-row justify-between\">\n              <Link href=\"/products\">\n                <a className=\"inline-flex items-center text-blue-dark hover:text-gold mb-4 sm:mb-0\">\n                  <i className=\"fas fa-arrow-left mr-2\"></i> Back to All Products\n                </a>\n              </Link>\n              <Link href=\"/contact\">\n                <a className=\"inline-block px-6 py-3 bg-gold text-white rounded-md hover:bg-gold-dark transition-colors\">\n                  Request Information\n                </a>\n              </Link>\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default ProductDetailPage;\n","size_bytes":10026},"client/src/pages/ProductsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Helmet } from \"react-helmet\";\nimport { motion } from \"framer-motion\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\n\nconst categories = [\"All\", \"White\", \"Beige\", \"Brown\", \"Black\", \"Colored\"];\n\nconst ProductsPage = () => {\n  const { t } = useLanguage();\n  const [activeCategory, setActiveCategory] = useState(\"All\");\n\n  const products = [\n    {\n      id: 'calacatta-gold',\n      nameKey: 'home.products.calacatta',\n      descKey: 'home.products.calacatta.desc',\n      image: '/images/marble/calacatta-gold.svg',\n      category: 'White'\n    },\n    {\n      id: 'carrara-white', \n      nameKey: 'home.products.carrara',\n      descKey: 'home.products.carrara.desc',\n      image: '/images/marble/carrara-white.svg',\n      category: 'White'\n    },\n    {\n      id: 'emperador-dark',\n      nameKey: 'home.products.emperador', \n      descKey: 'home.products.emperador.desc',\n      image: '/images/marble/emperador-dark.svg',\n      category: 'Brown'\n    }\n  ];\n  \n  const filteredProducts = activeCategory === \"All\" \n    ? products \n    : products.filter(product => product.category === activeCategory);\n\n  return (\n    <>\n      <Helmet>\n        <title>Marble Products | Gromarbre</title>\n        <meta name=\"description\" content=\"Explore our collection of premium marble products sourced from around the world.\" />\n      </Helmet>\n      <main>\n        {/* Hero Section */}\n        <section className=\"relative py-20 bg-blue-dark\">\n          <div className=\"absolute inset-0 overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1604014056465-b3e0f842652b?q=80&w=2000\" \n              alt=\"Marble Varieties\" \n              className=\"w-full h-full object-cover opacity-20\"\n            />\n          </div>\n          <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h1 className=\"text-4xl sm:text-5xl font-serif font-bold text-white mb-4\">\n                {t('home.products.title')}\n              </h1>\n              <div className=\"w-24 h-1 bg-gold mx-auto my-6\"></div>\n              <p className=\"max-w-2xl mx-auto text-lg text-gray-300\">\n                {t('products.subtitle')}\n              </p>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Filter Section */}\n        <section className=\"bg-white py-8 border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              {categories.map(category => (\n                <button\n                  key={category}\n                  onClick={() => setActiveCategory(category)}\n                  className={`px-4 py-2 rounded-md transition-colors ${\n                    activeCategory === category\n                      ? \"bg-gold text-white\"\n                      : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                  }`}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Products Grid */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredProducts.map((product, index) => (\n                <motion.div\n                  key={product.id}\n                  initial={{ opacity: 0, y: 30 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  className=\"bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow\"\n                >\n                  <div className=\"h-64 overflow-hidden\">\n                    <img \n                      src={product.image} \n                      alt={t(product.nameKey)} \n                      className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-500\"\n                    />\n                  </div>\n                  <div className=\"p-6\">\n                    <span className=\"inline-block px-3 py-1 bg-gold-light bg-opacity-20 text-gold-dark text-xs rounded-full mb-2\">\n                      {product.category}\n                    </span>\n                    <h3 className=\"font-serif text-xl font-bold text-charcoal\">{t(product.nameKey)}</h3>\n                    <p className=\"mt-2 text-gray-600 text-sm\">{t(product.descKey)}</p>\n                    <div className=\"mt-4 flex justify-between items-center\">\n                      <Link href={`/products/${product.id}`} className=\"inline-block text-gold hover:underline text-sm\">\n                        {t('ui.viewDetails')} <i className=\"fas fa-arrow-right ml-1\"></i>\n                      </Link>\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Call to Action */}\n        <section className=\"py-16 bg-blue-dark text-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h2 className=\"text-3xl font-serif font-bold mb-6\">\n              {t('ui.callToAction')}\n            </h2>\n            <p className=\"max-w-2xl mx-auto mb-8 text-gray-300\">\n              {t('products.cta.description')}\n            </p>\n            <Link href=\"/contact\" className=\"inline-block px-8 py-3 bg-gold text-white font-medium rounded hover:bg-gold-dark transition-colors\">\n              {t('ui.getQuote')}\n            </Link>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default ProductsPage;\n","size_bytes":5910},"client/src/pages/ProjectDetailPage.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useRoute, Link } from \"wouter\";\nimport { Helmet } from \"react-helmet\";\nimport { motion } from \"framer-motion\";\nimport { projects } from \"@/lib/constants\";\nimport { Project } from \"@/lib/types\";\n\nconst ProjectDetailPage = () => {\n  const [, params] = useRoute(\"/projects/:id\");\n  const [project, setProject] = useState<Project | null>(null);\n  const [selectedImage, setSelectedImage] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (params && params.id) {\n      const foundProject = projects.find(p => p.id === params.id);\n      if (foundProject) {\n        setProject(foundProject);\n        setSelectedImage(foundProject.gallery[0]);\n      }\n    }\n  }, [params]);\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-serif font-bold mb-4\">Project Not Found</h2>\n          <p className=\"text-gray-600 mb-6\">The project you're looking for doesn't exist or has been removed.</p>\n          <Link href=\"/projects\">\n            <a className=\"inline-block px-6 py-3 bg-gold text-white rounded-md hover:bg-gold-dark transition-colors\">\n              Back to Projects\n            </a>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{project.title} | Gromarbre Projects</title>\n        <meta name=\"description\" content={project.description} />\n      </Helmet>\n      <main>\n        {/* Hero Section */}\n        <section className=\"relative py-20 bg-blue-dark\">\n          <div className=\"absolute inset-0 overflow-hidden\">\n            <img \n              src={project.image} \n              alt={project.title} \n              className=\"w-full h-full object-cover opacity-30\"\n            />\n          </div>\n          <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <span className=\"inline-block px-4 py-1 bg-gold text-white text-sm rounded-full mb-4\">\n                {project.category}\n              </span>\n              <h1 className=\"text-4xl sm:text-5xl font-serif font-bold text-white mb-4\">\n                {project.title}\n              </h1>\n              <div className=\"w-24 h-1 bg-gold mx-auto my-6\"></div>\n              <p className=\"max-w-2xl mx-auto text-lg text-gray-300\">\n                {project.description}\n              </p>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Project Details */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"lg:flex lg:gap-12\">\n              {/* Project Info */}\n              <div className=\"lg:w-1/3 mb-10 lg:mb-0\">\n                <div className=\"bg-gray-50 p-8 rounded-lg shadow-md\">\n                  <h2 className=\"text-2xl font-serif font-bold mb-6 text-charcoal\">Project Details</h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Client</h3>\n                      <p className=\"mt-1 text-lg text-charcoal\">{project.client}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Location</h3>\n                      <p className=\"mt-1 text-lg text-charcoal\">{project.location}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Completion Date</h3>\n                      <p className=\"mt-1 text-lg text-charcoal\">{project.completionDate}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500\">Services Provided</h3>\n                      <ul className=\"mt-1 space-y-1 text-charcoal\">\n                        {project.services.map((service, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <i className=\"fas fa-check text-gold mt-1 mr-2\"></i>\n                            <span>{service}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Project Gallery */}\n              <div className=\"lg:w-2/3\">\n                <div className=\"bg-gray-900 rounded-lg overflow-hidden mb-6\">\n                  <img \n                    src={selectedImage || project.image} \n                    alt={project.title} \n                    className=\"w-full h-[500px] object-cover object-center\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-5 gap-4\">\n                  {project.gallery.map((img, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setSelectedImage(img)}\n                      className={`h-20 rounded-md overflow-hidden transition-all ${\n                        selectedImage === img ? 'ring-4 ring-gold' : 'opacity-70 hover:opacity-100'\n                      }`}\n                    >\n                      <img \n                        src={img} \n                        alt={`Gallery ${index + 1}`} \n                        className=\"w-full h-full object-cover\"\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n            \n            {/* Project Description */}\n            <div className=\"mt-16\">\n              <h2 className=\"text-3xl font-serif font-bold mb-6 text-charcoal\">Project Overview</h2>\n              <div className=\"prose prose-lg max-w-none\">\n                <p>{project.longDescription}</p>\n              </div>\n            </div>\n            \n            {/* Navigation */}\n            <div className=\"mt-16 border-t border-gray-200 pt-8 flex flex-col sm:flex-row justify-between\">\n              <Link href=\"/projects\">\n                <a className=\"inline-flex items-center text-blue-dark hover:text-gold mb-4 sm:mb-0\">\n                  <i className=\"fas fa-arrow-left mr-2\"></i> Back to All Projects\n                </a>\n              </Link>\n              <Link href=\"/contact\">\n                <a className=\"inline-block px-6 py-3 bg-gold text-white rounded-md hover:bg-gold-dark transition-colors\">\n                  Start Your Project\n                </a>\n              </Link>\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default ProjectDetailPage;\n","size_bytes":6909},"client/src/pages/ProjectsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Helmet } from \"react-helmet\";\nimport { motion } from \"framer-motion\";\nimport { projects } from \"@/lib/constants\";\n\nconst categories = [\"All\", \"Hotel\", \"Residential\", \"Commercial\", \"Educational\"];\n\nconst ProjectsPage = () => {\n  const [activeCategory, setActiveCategory] = useState(\"All\");\n  \n  const filteredProjects = activeCategory === \"All\" \n    ? projects \n    : projects.filter(project => project.category === activeCategory);\n\n  return (\n    <>\n      <Helmet>\n        <title>Our Projects | Gromarbre</title>\n        <meta name=\"description\" content=\"Explore our portfolio of luxury marble projects completed for hotels, residences, and commercial spaces.\" />\n      </Helmet>\n      <main>\n        {/* Hero Section */}\n        <section className=\"relative py-20 bg-blue-dark\">\n          <div className=\"absolute inset-0 overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1600607686527-6fb886090705?q=80&w=2000\" \n              alt=\"Luxury Marble Interior\" \n              className=\"w-full h-full object-cover opacity-20\"\n            />\n          </div>\n          <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h1 className=\"text-4xl sm:text-5xl font-serif font-bold text-white mb-4\">\n                Our Projects\n              </h1>\n              <div className=\"w-24 h-1 bg-gold mx-auto my-6\"></div>\n              <p className=\"max-w-2xl mx-auto text-lg text-gray-300\">\n                Discover how we've transformed spaces with the timeless beauty of marble.\n              </p>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Filter Section */}\n        <section className=\"bg-white py-8 border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              {categories.map(category => (\n                <button\n                  key={category}\n                  onClick={() => setActiveCategory(category)}\n                  className={`px-4 py-2 rounded-md transition-colors ${\n                    activeCategory === category\n                      ? \"bg-gold text-white\"\n                      : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n                  }`}\n                >\n                  {category}\n                </button>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Projects Grid */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredProjects.map((project, index) => (\n                <motion.div\n                  key={project.id}\n                  initial={{ opacity: 0, y: 30 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  className=\"project-card rounded-lg overflow-hidden shadow-lg group bg-white\"\n                >\n                  <div className=\"relative h-80\">\n                    <img \n                      src={project.image} \n                      alt={project.title} \n                      className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                    />\n                    <div className=\"project-overlay absolute inset-0 bg-blue-dark bg-opacity-70 opacity-0 transition-opacity duration-300 flex flex-col justify-end p-6\">\n                      <div className=\"text-white\">\n                        <h3 className=\"text-xl font-serif font-bold\">{project.title}</h3>\n                        <p className=\"mt-2\">{project.description}</p>\n                        <Link href={`/projects/${project.id}`}>\n                          <a className=\"mt-4 inline-block text-gold hover:underline\">\n                            View Project <i className=\"fas fa-arrow-right ml-1\"></i>\n                          </a>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"p-6\">\n                    <span className=\"inline-block px-3 py-1 bg-gold-light bg-opacity-20 text-gold-dark text-xs rounded-full mb-2\">\n                      {project.category}\n                    </span>\n                    <h3 className=\"font-serif text-xl font-bold text-charcoal\">{project.title}</h3>\n                    <p className=\"mt-2 text-gray-600\">{project.location}</p>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default ProjectsPage;\n","size_bytes":4999},"client/src/pages/ServicesPage.tsx":{"content":"import { Helmet } from \"react-helmet\";\nimport { motion } from \"framer-motion\";\nimport { useLanguage } from \"../contexts/LanguageContext\";\n\nconst ServicesPage = () => {\n  const { t } = useLanguage();\n\n  const services = [\n    {\n      id: \"custom-design\",\n      titleKey: \"home.services.design\",\n      descKey: \"home.services.design.desc\",\n      icon: \"fas fa-pencil-ruler\",\n      image: \"https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?q=80&w=2000\"\n    },\n    {\n      id: \"installation\",\n      titleKey: \"home.services.installation\",\n      descKey: \"home.services.installation.desc\",\n      icon: \"fas fa-hammer\",\n      image: \"https://images.unsplash.com/photo-1581775231124-5f9258fef7b3?q=80&w=2000\"\n    },\n    {\n      id: \"restoration\",\n      titleKey: \"home.services.maintenance\",\n      descKey: \"home.services.maintenance.desc\",\n      icon: \"fas fa-magic\",\n      image: \"https://images.unsplash.com/photo-1636397210916-7c636e461444?q=80&w=2000\"\n    },\n    {\n      id: \"fabrication\",\n      titleKey: \"home.services.fabrication\",\n      descKey: \"home.services.fabrication.desc\",\n      icon: \"fas fa-tools\",\n      image: \"https://images.unsplash.com/photo-1574966739987-65e1952f7ae3?q=80&w=2000\"\n    }\n  ];\n  return (\n    <>\n      <Helmet>\n        <title>Our Services | Gromarbre</title>\n        <meta name=\"description\" content=\"Discover our comprehensive range of premium marble services from design to installation and maintenance.\" />\n      </Helmet>\n      <main>\n        {/* Hero Section */}\n        <section className=\"relative py-20 bg-blue-dark\">\n          <div className=\"absolute inset-0 overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1618826411640-d6df44dd3f7a?q=80&w=2000\" \n              alt=\"Marble Craftsmanship\" \n              className=\"w-full h-full object-cover opacity-20\"\n            />\n          </div>\n          <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h1 className=\"text-4xl sm:text-5xl font-serif font-bold text-white mb-4\">\n                {t('home.services.title')}\n              </h1>\n              <div className=\"w-24 h-1 bg-gold mx-auto my-6\"></div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Services List Section */}\n        <section className=\"py-20 bg-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid gap-12\">\n              {services.map((service, index) => (\n                <motion.div \n                  key={service.id}\n                  id={service.id}\n                  initial={{ opacity: 0, y: 30 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  className={`flex flex-col lg:flex-row lg:items-center gap-8 ${\n                    index % 2 === 1 ? 'lg:flex-row-reverse' : ''\n                  }`}\n                >\n                  <div className=\"lg:w-1/2\">\n                    <img \n                      src={service.image} \n                      alt={t(service.titleKey)} \n                      className=\"rounded-lg shadow-xl w-full h-80 object-cover\"\n                    />\n                  </div>\n                  <div className=\"lg:w-1/2\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"w-12 h-12 bg-gold-light rounded-full flex items-center justify-center mr-4\">\n                        <i className={`${service.icon} text-white text-xl`}></i>\n                      </div>\n                      <h2 className=\"text-3xl font-serif font-bold text-charcoal\">\n                        {t(service.titleKey)}\n                      </h2>\n                    </div>\n                    <div className=\"mt-4 space-y-4 text-gray-600\">\n                      <p>{t(service.descKey)}</p>\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Call to Action */}\n        <section className=\"py-16 bg-blue-dark text-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h2 className=\"text-3xl font-serif font-bold mb-6\">\n              Ready to Transform Your Space?\n            </h2>\n            <p className=\"max-w-2xl mx-auto mb-8 text-gray-300\">\n              Contact us today to discuss your marble needs and receive a personalized consultation.\n            </p>\n            <a \n              href=\"/contact\" \n              className=\"inline-block px-8 py-3 bg-gold text-white font-medium rounded hover:bg-gold-dark transition-colors\"\n            >\n              Contact Us Today\n            </a>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default ServicesPage;\n","size_bytes":5060},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/home/About.tsx":{"content":"import { useScrollReveal } from \"@/hooks/useScrollReveal\";\nimport { useLanguage } from \"../../contexts/LanguageContext\";\n\nconst About = () => {\n  const { ref } = useScrollReveal();\n  const { t } = useLanguage();\n\n  return (\n    <section id=\"about\" ref={ref} className=\"py-20 bg-white reveal-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"lg:flex lg:items-center lg:space-x-12\">\n          <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n            <img \n              src=\"https://images.unsplash.com/photo-1608501078713-8e445a709b39?q=80&w=2000\" \n              alt=\"Marble Craftsmanship\" \n              className=\"rounded-lg shadow-xl w-full h-[500px] object-cover\"\n            />\n          </div>\n          <div className=\"lg:w-1/2\">\n            <div className=\"text-sm font-medium text-gold uppercase tracking-wider\">{t('home.about.title')}</div>\n            <h2 className=\"mt-2 text-3xl sm:text-4xl font-serif font-bold text-charcoal\">\n              {t('home.about.title')}\n            </h2>\n            <div className=\"mt-6 space-y-5 text-gray-600\">\n              <p>\n                {t('home.about.description')}\n              </p>\n            </div>\n            <div className=\"mt-10 grid grid-cols-2 gap-8\">\n              <div>\n                <div className=\"font-serif text-gold text-4xl font-bold\">25+</div>\n                <div className=\"mt-2 text-gray-600\">{t('home.about.experience')}</div>\n              </div>\n              <div>\n                <div className=\"font-serif text-gold text-4xl font-bold\">500+</div>\n                <div className=\"mt-2 text-gray-600\">{t('home.about.projects')}</div>\n              </div>\n              <div>\n                <div className=\"font-serif text-gold text-4xl font-bold\">98%</div>\n                <div className=\"mt-2 text-gray-600\">{t('home.about.satisfaction')}</div>\n              </div>\n              <div>\n                <div className=\"font-serif text-gold text-4xl font-bold\">50+</div>\n                <div className=\"mt-2 text-gray-600\">Artisans Experts</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default About;\n","size_bytes":2202},"client/src/components/home/Clients.tsx":{"content":"import { useScrollReveal } from \"@/hooks/useScrollReveal\";\nimport { clients } from \"@/lib/constants\";\n\nconst Clients = () => {\n  const { ref } = useScrollReveal();\n\n  return (\n    <section ref={ref} className=\"py-20 bg-white reveal-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"text-sm font-medium text-gold uppercase tracking-wider\">Our Clients</div>\n          <h2 className=\"mt-2 text-3xl sm:text-4xl font-serif font-bold text-charcoal\">\n            Trusted by Industry Leaders\n          </h2>\n          <p className=\"mt-4 max-w-2xl mx-auto text-gray-600\">\n            We're proud to have collaborated with prestigious clients across Morocco and beyond.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8 items-center\">\n          {clients.map((client) => (\n            <div key={client.id} className=\"flex justify-center grayscale hover:grayscale-0 transition-all\">\n              <div className=\"w-24 h-24 sm:w-32 sm:h-32 bg-gray-100 rounded-full flex items-center justify-center\">\n                <i className={`${client.icon} text-3xl text-gray-400`}></i>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"mt-16 bg-gray-50 p-10 rounded-lg shadow-md\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-quote-left text-gold text-4xl mb-6\"></i>\n            <blockquote className=\"text-xl font-serif italic text-gray-700\">\n              \"Gromarbre's commitment to excellence and attention to detail transformed our hotel lobby into a true masterpiece. Their craftsmanship is unparalleled.\"\n            </blockquote>\n            <div className=\"mt-4\">\n              <p className=\"font-bold\">Ahmed Benjelloun</p>\n              <p className=\"text-gray-600\">Facilities Director, Royal Mansour Hotel</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Clients;\n","size_bytes":2048},"client/src/components/home/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useScrollReveal } from \"@/hooks/useScrollReveal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLanguage } from \"../../contexts/LanguageContext\";\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\n  email: z.string().email({ message: \"Please enter a valid email address\" }),\n  phone: z.string().min(5, { message: \"Please enter a valid phone number\" }),\n  message: z.string().min(10, { message: \"Message must be at least 10 characters\" }),\n});\n\ntype ContactFormValues = z.infer<typeof contactFormSchema>;\n\nconst Contact = () => {\n  const { ref } = useScrollReveal();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<ContactFormValues>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      message: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ContactFormValues) => {\n    setIsSubmitting(true);\n    try {\n      await apiRequest(\"POST\", \"/api/contact\", data);\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for your message. We'll get back to you soon.\",\n      });\n      reset();\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"There was a problem sending your message. Please try again.\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section id=\"contact\" ref={ref} className=\"py-20 bg-gray-50 reveal-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"text-sm font-medium text-gold uppercase tracking-wider\">{t('nav.contact')}</div>\n          <h2 className=\"mt-2 text-3xl sm:text-4xl font-serif font-bold text-charcoal\">\n            {t('home.contact.title')}\n          </h2>\n          <p className=\"mt-4 max-w-2xl mx-auto text-gray-600\">\n            {t('home.contact.description')}\n          </p>\n        </div>\n        \n        <div className=\"lg:flex lg:space-x-12\">\n          <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n            <form className=\"bg-white p-8 rounded-lg shadow-md\" onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.name')}</label>\n                  <input \n                    type=\"text\" \n                    id=\"name\" \n                    className={`w-full px-4 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                    placeholder={t('contact.form.name')}\n                    {...register(\"name\")}\n                  />\n                  {errors.name && (\n                    <p className=\"mt-1 text-red-500 text-xs\">{errors.name.message}</p>\n                  )}\n                </div>\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.email')}</label>\n                  <input \n                    type=\"email\" \n                    id=\"email\" \n                    className={`w-full px-4 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                    placeholder={t('contact.form.email')}\n                    {...register(\"email\")}\n                  />\n                  {errors.email && (\n                    <p className=\"mt-1 text-red-500 text-xs\">{errors.email.message}</p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"mb-6\">\n                <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.phone')}</label>\n                <input \n                  type=\"tel\" \n                  id=\"phone\" \n                  className={`w-full px-4 py-2 border ${errors.phone ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                  placeholder={t('contact.form.phone')}\n                  {...register(\"phone\")}\n                />\n                {errors.phone && (\n                  <p className=\"mt-1 text-red-500 text-xs\">{errors.phone.message}</p>\n                )}\n              </div>\n              \n              <div className=\"mb-6\">\n                <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">{t('contact.form.message')}</label>\n                <textarea \n                  id=\"message\" \n                  rows={5} \n                  className={`w-full px-4 py-2 border ${errors.message ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-gold focus:border-transparent`}\n                  placeholder={t('contact.form.message')}\n                  {...register(\"message\")}\n                ></textarea>\n                {errors.message && (\n                  <p className=\"mt-1 text-red-500 text-xs\">{errors.message.message}</p>\n                )}\n              </div>\n              \n              <button \n                type=\"submit\" \n                className=\"w-full bg-gold text-white py-3 px-6 rounded-md hover:bg-gold-dark transition-colors disabled:opacity-70\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <span className=\"flex items-center justify-center\">\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i> Sending...\n                  </span>\n                ) : t('contact.form.submit')}\n              </button>\n            </form>\n          </div>\n          \n          <div className=\"lg:w-1/2\">\n            <div className=\"bg-white p-8 rounded-lg shadow-md mb-8\">\n              <h3 className=\"text-xl font-serif font-bold mb-4\">Contact Information</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                    <i className=\"fas fa-map-marker-alt\"></i>\n                  </div>\n                  <div className=\"ml-3 text-gray-600\">\n                    <p>321 Avenue Mohammed V</p>\n                    <p>Casablanca, Morocco</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                    <i className=\"fas fa-phone-alt\"></i>\n                  </div>\n                  <div className=\"ml-3 text-gray-600\">\n                    <p>+212-5xx-xxxxxx</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                    <i className=\"fas fa-envelope\"></i>\n                  </div>\n                  <div className=\"ml-3 text-gray-600\">\n                    <p>info@gromarbre.ma</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 h-6 w-6 text-gold\">\n                    <i className=\"fas fa-clock\"></i>\n                  </div>\n                  <div className=\"ml-3 text-gray-600\">\n                    <p>Monday - Friday: 9:00 AM - 6:00 PM</p>\n                    <p>Saturday: 10:00 AM - 2:00 PM</p>\n                    <p>Sunday: Closed</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 flex space-x-4\">\n                <a href=\"#\" className=\"text-gold hover:text-gold-dark\" aria-label=\"Facebook\">\n                  <i className=\"fab fa-facebook-f text-xl\"></i>\n                </a>\n                <a href=\"#\" className=\"text-gold hover:text-gold-dark\" aria-label=\"Instagram\">\n                  <i className=\"fab fa-instagram text-xl\"></i>\n                </a>\n                <a href=\"#\" className=\"text-gold hover:text-gold-dark\" aria-label=\"LinkedIn\">\n                  <i className=\"fab fa-linkedin-in text-xl\"></i>\n                </a>\n              </div>\n            </div>\n            \n            <div className=\"h-64 rounded-lg overflow-hidden shadow-md\">\n              <iframe \n                src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d106376.72691566196!2d-7.669966069658781!3d33.57240330064237!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0xda7cd4778aa113b%3A0xb06c1d84f310fd3!2sCasablanca%2C%20Morocco!5e0!3m2!1sen!2sus!4v1660488764201!5m2!1sen!2sus\" \n                width=\"100%\" \n                height=\"100%\" \n                style={{ border: 0 }} \n                allowFullScreen \n                loading=\"lazy\" \n                referrerPolicy=\"no-referrer-when-downgrade\"\n                title=\"Gromarbre Location\"\n              ></iframe>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n","size_bytes":9470},"client/src/components/home/Hero.tsx":{"content":"import { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { useLanguage } from \"../../contexts/LanguageContext\";\n\nconst Hero = () => {\n  const { t } = useLanguage();\n  return (\n    <section id=\"home\" className=\"relative h-screen flex items-center justify-center overflow-hidden\">\n      <div className=\"absolute inset-0\">\n        <img \n          src=\"https://images.unsplash.com/photo-1600585154084-4e5fe7c39198?q=80&w=2000\" \n          alt=\"Luxury Marble Interior\" \n          className=\"h-full w-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-blue-dark bg-opacity-40\"></div>\n      </div>\n      <div className=\"relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-serif font-bold text-white mb-4\">\n            {t('home.hero.title')}\n          </h1>\n          <p className=\"mt-6 text-xl text-white max-w-3xl mx-auto\">\n            {t('home.hero.subtitle')}\n          </p>\n          <div className=\"mt-10 flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-6\">\n            <Link href=\"/projects\">\n              <a className=\"marble-button inline-block px-8 py-3 border-2 border-gold text-gold font-medium rounded hover:bg-gold hover:text-white transition-colors\">\n                {t('home.hero.cta')}\n              </a>\n            </Link>\n            <Link href=\"/contact\">\n              <a className=\"marble-button inline-block px-8 py-3 bg-gold text-white font-medium rounded hover:bg-gold-dark transition-colors\">\n                {t('home.hero.cta2')}\n              </a>\n            </Link>\n          </div>\n        </motion.div>\n      </div>\n      <div className=\"absolute bottom-10 left-1/2 transform -translate-x-1/2 text-white animate-bounce\">\n        <a href=\"#about\" aria-label=\"Scroll to About section\">\n          <i className=\"fas fa-chevron-down text-2xl\"></i>\n        </a>\n      </div>\n    </section>\n  );\n};\n\nexport default Hero;\n","size_bytes":2133},"client/src/components/home/Products.tsx":{"content":"import { Link } from \"wouter\";\nimport { useScrollReveal } from \"@/hooks/useScrollReveal\";\nimport { useLanguage } from \"../../contexts/LanguageContext\";\n\nconst Products = () => {\n  const { ref } = useScrollReveal();\n  const { t } = useLanguage();\n\n  const products = [\n    {\n      id: 'calacatta-gold',\n      nameKey: 'home.products.calacatta',\n      descKey: 'home.products.calacatta.desc',\n      image: '/images/marble/calacatta-gold.svg'\n    },\n    {\n      id: 'carrara-white', \n      nameKey: 'home.products.carrara',\n      descKey: 'home.products.carrara.desc',\n      image: '/images/marble/carrara-white.svg'\n    },\n    {\n      id: 'emperador-dark',\n      nameKey: 'home.products.emperador', \n      descKey: 'home.products.emperador.desc',\n      image: '/images/marble/emperador-dark.svg'\n    }\n  ];\n\n  return (\n    <section id=\"products\" ref={ref} className=\"py-20 bg-gray-50 reveal-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"text-sm font-medium text-gold uppercase tracking-wider\">{t('nav.products')}</div>\n          <h2 className=\"mt-2 text-3xl sm:text-4xl font-serif font-bold text-charcoal\">\n            {t('home.products.title')}\n          </h2>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {products.map((product) => (\n            <div key={product.id} className=\"bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow\">\n              <div className=\"h-64 overflow-hidden\">\n                <img \n                  src={product.image} \n                  alt={t(product.nameKey)} \n                  className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-500\"\n                />\n              </div>\n              <div className=\"p-6\">\n                <h3 className=\"font-serif text-lg font-bold text-charcoal\">{t(product.nameKey)}</h3>\n                <p className=\"mt-2 text-gray-600 text-sm\">{t(product.descKey)}</p>\n                <Link href={`/products/${product.id}`} className=\"mt-4 inline-block text-gold hover:underline text-sm\">\n                  {t('ui.viewDetails')} <i className=\"fas fa-arrow-right ml-1\"></i>\n                </Link>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <Link href=\"/products\" className=\"marble-button inline-block px-8 py-3 border-2 border-gold text-gold font-medium rounded hover:bg-gold hover:text-white transition-colors\">\n            {t('ui.learnMore')}\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Products;\n","size_bytes":2699},"client/src/components/home/Projects.tsx":{"content":"import { Link } from \"wouter\";\nimport { useScrollReveal } from \"@/hooks/useScrollReveal\";\nimport { projects } from \"@/lib/constants\";\n\nconst Projects = () => {\n  const { ref } = useScrollReveal();\n\n  return (\n    <section id=\"projects\" ref={ref} className=\"py-20 bg-white reveal-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"text-sm font-medium text-gold uppercase tracking-wider\">Our Portfolio</div>\n          <h2 className=\"mt-2 text-3xl sm:text-4xl font-serif font-bold text-charcoal\">\n            Featured Projects\n          </h2>\n          <p className=\"mt-4 max-w-2xl mx-auto text-gray-600\">\n            Discover how we've transformed spaces with the timeless beauty of marble.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {projects.slice(0, 3).map((project) => (\n            <div key={project.id} className=\"project-card rounded-lg overflow-hidden shadow-lg group\">\n              <div className=\"relative h-80\">\n                <img \n                  src={project.image} \n                  alt={project.title} \n                  className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                />\n                <div className=\"project-overlay absolute inset-0 bg-blue-dark bg-opacity-70 opacity-0 transition-opacity duration-300 flex flex-col justify-end p-6\">\n                  <div className=\"text-white\">\n                    <h3 className=\"text-xl font-serif font-bold\">{project.title}</h3>\n                    <p className=\"mt-2\">{project.description}</p>\n                    <Link href={`/projects/${project.id}`}>\n                      <a className=\"mt-4 inline-block text-gold hover:underline\">\n                        View Project <i className=\"fas fa-arrow-right ml-1\"></i>\n                      </a>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n              <div className=\"p-6\">\n                <h3 className=\"font-serif text-xl font-bold text-charcoal\">{project.title}</h3>\n                <p className=\"mt-2 text-gray-600\">{project.location}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <Link href=\"/projects\">\n            <a className=\"marble-button inline-block px-8 py-3 border-2 border-gold text-gold font-medium rounded hover:bg-gold hover:text-white transition-colors\">\n              View All Projects\n            </a>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Projects;\n","size_bytes":2701},"client/src/components/home/Services.tsx":{"content":"import { Link } from \"wouter\";\nimport { useScrollReveal } from \"@/hooks/useScrollReveal\";\nimport { useLanguage } from \"../../contexts/LanguageContext\";\n\nconst Services = () => {\n  const { ref } = useScrollReveal();\n  const { t } = useLanguage();\n\n  const services = [\n    {\n      id: 1,\n      icon: 'fas fa-drafting-compass',\n      titleKey: 'home.services.design',\n      descKey: 'home.services.design.desc'\n    },\n    {\n      id: 2,\n      icon: 'fas fa-hammer',\n      titleKey: 'home.services.fabrication',\n      descKey: 'home.services.fabrication.desc'\n    },\n    {\n      id: 3,\n      icon: 'fas fa-hard-hat',\n      titleKey: 'home.services.installation',\n      descKey: 'home.services.installation.desc'\n    },\n    {\n      id: 4,\n      icon: 'fas fa-tools',\n      titleKey: 'home.services.maintenance',\n      descKey: 'home.services.maintenance.desc'\n    }\n  ];\n\n  return (\n    <section id=\"services\" ref={ref} className=\"py-20 bg-gray-50 reveal-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"text-sm font-medium text-gold uppercase tracking-wider\">{t('nav.services')}</div>\n          <h2 className=\"mt-2 text-3xl sm:text-4xl font-serif font-bold text-charcoal\">\n            {t('home.services.title')}\n          </h2>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {services.map((service) => (\n            <div \n              key={service.id} \n              className=\"bg-white p-8 rounded-lg shadow-md hover:shadow-xl transition-shadow\"\n            >\n              <div className=\"w-12 h-12 bg-gold-light rounded-full flex items-center justify-center mb-5\">\n                <i className={`${service.icon} text-white text-xl`}></i>\n              </div>\n              <h3 className=\"text-xl font-serif font-semibold mb-3\">{t(service.titleKey)}</h3>\n              <p className=\"text-gray-600\">\n                {t(service.descKey)}\n              </p>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <Link href=\"/services\">\n            <a className=\"marble-button inline-block px-8 py-3 border-2 border-gold text-gold font-medium rounded hover:bg-gold hover:text-white transition-colors\">\n              View All Services\n            </a>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Services;\n","size_bytes":2447},"client/src/components/home/SplashScreen.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport AnimatedLogo from \"../shared/AnimatedLogo\";\nimport { useEffect, useState } from \"react\";\n\nconst SplashScreen = () => {\n  const [showSplash, setShowSplash] = useState(true);\n  const [logoAnimationComplete, setLogoAnimationComplete] = useState(false);\n  \n  // Define theme colors\n  const colors = {\n    gold: \"#c9a050\",\n    darkBlue: \"#0e4b78\"\n  };\n  \n  // Handle logo animation completion\n  const handleLogoComplete = () => {\n    setLogoAnimationComplete(true);\n    // Add a delay before transitioning out\n    setTimeout(() => {\n      setShowSplash(false);\n    }, 1000);\n  };\n  \n  return (\n    <AnimatePresence>\n      {showSplash && (\n        <motion.div\n          className=\"fixed inset-0 z-50 overflow-hidden\"\n          initial={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.8, ease: \"easeInOut\" }}\n        >\n          {/* Moroccan-inspired background */}\n          <div className=\"absolute inset-0 bg-gradient-to-b from-blue-950 via-blue-900 to-blue-950\">\n            {/* Decorative Moroccan pattern elements */}\n            <div className=\"absolute w-full h-full opacity-10\">\n              {/* Pattern at corners */}\n              {[\n                { top: \"5%\", left: \"5%\" },\n                { top: \"5%\", right: \"5%\" },\n                { bottom: \"5%\", left: \"5%\" },\n                { bottom: \"5%\", right: \"5%\" }\n              ].map((position, i) => (\n                <motion.div \n                  key={`corner-${i}`}\n                  className=\"absolute w-32 h-32 md:w-48 md:h-48\"\n                  style={{ \n                    backgroundImage: \"url('/images/moroccan-pattern.svg')\",\n                    backgroundSize: \"contain\",\n                    backgroundRepeat: \"no-repeat\",\n                    opacity: 0.15,\n                    ...position\n                  }}\n                  initial={{ scale: 0, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 0.15 }}\n                  transition={{ \n                    duration: 1.5, \n                    delay: 0.3 * i,\n                    ease: \"easeOut\" \n                  }}\n                />\n              ))}\n              \n              {/* Decorative arches - Moroccan architecture inspired */}\n              {Array.from({ length: 8 }).map((_, i) => {\n                const size = 50 + Math.random() * 100;\n                const angle = (i * 45) * (Math.PI / 180);\n                const radius = 40; // % from center\n                \n                const xPos = 50 + radius * Math.cos(angle);\n                const yPos = 50 + radius * Math.sin(angle);\n                \n                return (\n                  <motion.div \n                    key={`arch-${i}`}\n                    className=\"absolute opacity-10\"\n                    style={{\n                      width: `${size}px`,\n                      height: `${size * 1.5}px`,\n                      left: `${xPos}%`,\n                      top: `${yPos}%`,\n                      transform: `translate(-50%, -50%) rotate(${i * 45}deg)`,\n                      borderRadius: `${size / 2}px ${size / 2}px 0 0`,\n                      border: `2px solid ${colors.gold}`,\n                      borderBottom: 'none'\n                    }}\n                    initial={{ scale: 0, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 0.1 }}\n                    transition={{ \n                      duration: 1.2, \n                      delay: 0.15 * i,\n                      ease: \"easeOut\" \n                    }}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          \n          {/* Ornamental background frame */}\n          <div className=\"absolute inset-8 border-4 border-opacity-10 rounded-lg\" style={{ borderColor: colors.gold, borderOpacity: 0.1 }}>\n            <div className=\"absolute inset-0 border border-white border-opacity-5\"></div>\n          </div>\n          \n          {/* Radial overlay for better contrast */}\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,transparent_30%,rgba(0,0,0,0.3)_100%)]\" />\n          \n          {/* Main content container */}\n          <div className=\"relative h-full flex flex-col items-center justify-center max-w-screen-md mx-auto px-6\">\n            {/* Decorative top arc */}\n            <motion.div\n              className=\"absolute top-8 left-1/2 transform -translate-x-1/2 w-40 h-20 md:w-64 md:h-32\"\n              style={{\n                borderRadius: \"100% 100% 0 0\",\n                border: `2px solid ${colors.gold}`,\n                borderBottom: \"none\",\n                opacity: 0.2\n              }}\n              initial={{ scaleX: 0, opacity: 0 }}\n              animate={{ scaleX: 1, opacity: 0.2 }}\n              transition={{ duration: 1, delay: 0.5 }}\n            />\n            \n            {/* Interactive logo component */}\n            <div className=\"w-64 h-64 md:w-80 md:h-80 mb-4 relative\">\n              <AnimatedLogo onComplete={handleLogoComplete} className=\"w-full h-full\" />\n            </div>\n            \n            {/* Title appears after logo animation completes */}\n            <AnimatePresence>\n              {logoAnimationComplete && (\n                <motion.div\n                  className=\"text-center mt-8 relative\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.8 }}\n                >\n                  <h1 \n                    className=\"text-3xl md:text-4xl font-serif tracking-wider relative z-10\"\n                    style={{ color: colors.gold }}\n                  >\n                    GROMARBRE\n                  </h1>\n                  \n                  <p \n                    className=\"text-sm uppercase tracking-widest mt-2 opacity-80 font-serif\"\n                    style={{ color: colors.gold }}\n                  >\n                    S.A.R.L\n                  </p>\n                  \n                  <p className=\"text-xs md:text-sm text-white mt-6 max-w-xs mx-auto font-serif italic\">\n                    \"The Artistry of Luxury Marble\"\n                  </p>\n                  \n                  {/* Decorative line under motto */}\n                  <div className=\"w-24 h-px mx-auto mt-4\" style={{ backgroundColor: colors.gold, opacity: 0.5 }}></div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n          \n          {/* Decorative bottom corners */}\n          {[\n            { left: \"10%\", bottom: \"10%\" },\n            { right: \"10%\", bottom: \"10%\" }\n          ].map((position, i) => (\n            <motion.div \n              key={`corner-decor-${i}`}\n              className=\"absolute w-16 h-16\"\n              style={{ \n                ...position,\n                opacity: 0.2,\n                border: `2px solid ${colors.gold}`,\n                borderWidth: i === 0 ? \"0 2px 2px 0\" : \"0 0 2px 2px\",\n                borderRadius: i === 0 ? \"0 0 16px 0\" : \"0 0 0 16px\",\n              }}\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 0.2 }}\n              transition={{ duration: 1, delay: 0.8 + (i * 0.2) }}\n            />\n          ))}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default SplashScreen;\n","size_bytes":7394},"client/src/components/layout/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport AnimatedLogo from \"../shared/AnimatedLogo\";\nimport { useLanguage } from \"../../contexts/LanguageContext\";\n\nconst Footer = () => {\n  const { t } = useLanguage();\n  return (\n    <footer className=\"bg-blue-dark text-white pt-16 pb-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12\">\n          <div>\n            <div className=\"flex items-center mb-4\">\n              <AnimatedLogo className=\"h-12 w-12\" animate={false} />\n              <span className=\"ml-2 font-serif font-bold text-xl text-white\">\n                GROMARBRE\n              </span>\n            </div>\n            <p className=\"text-gray-300\">\n              {t('footer.description')}\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-serif font-semibold mb-6\">{t('ui.quickLinks')}</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('nav.home')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/#about\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.about.title')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('nav.services')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/projects\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('nav.projects')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('nav.products')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('nav.contact')}</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-serif font-semibold mb-6\">{t('footer.services')}</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/services#custom-design\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.services.design')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services#installation\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.services.installation')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services#restoration\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.services.maintenance')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services#maintenance\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.services.maintenance')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services#sourcing\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.services.fabrication')}</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services#consultation\">\n                  <a className=\"text-gray-300 hover:text-gold transition-colors\">{t('home.services.design')}</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-serif font-semibold mb-6\">{t('ui.newsletter')}</h3>\n            <p className=\"text-gray-300 mb-4\">\n              {t('footer.newsletter.desc')}\n            </p>\n            <form className=\"mb-4\" onSubmit={(e) => e.preventDefault()}>\n              <div className=\"flex\">\n                <input \n                  type=\"email\" \n                  placeholder={t('footer.email')} \n                  className=\"flex-grow px-4 py-2 rounded-l-md focus:outline-none text-gray-800\"\n                />\n                <button \n                  type=\"submit\" \n                  className=\"bg-gold text-white px-4 py-2 rounded-r-md hover:bg-gold-dark transition-colors\"\n                >\n                  {t('ui.subscribe')}\n                </button>\n              </div>\n            </form>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-300 hover:text-gold\" aria-label=\"Facebook\">\n                <i className=\"fab fa-facebook-f\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-gold\" aria-label=\"Instagram\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-gold\" aria-label=\"LinkedIn\">\n                <i className=\"fab fa-linkedin-in\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-12 pt-8 border-t border-opacity-20 border-blue-light text-center text-gray-400 text-sm\">\n          <p>&copy; {new Date().getFullYear()} Gromarbre S.A.R.L. {t('footer.rights')}</p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","size_bytes":5554},"client/src/components/layout/Navbar.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport AnimatedLogo from \"../shared/AnimatedLogo\";\nimport { useLanguage, Language } from \"../../contexts/LanguageContext\";\n\nconst Navbar = () => {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [languageDropdownOpen, setLanguageDropdownOpen] = useState(false);\n  const [location] = useLocation();\n  const { language, setLanguage, t } = useLanguage();\n  const languageDropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    // Close mobile menu when location changes\n    setMobileMenuOpen(false);\n    setLanguageDropdownOpen(false);\n    \n    // Scroll to top on navigation\n    if (\"scrollRestoration\" in window.history) {\n      window.history.scrollRestoration = \"manual\";\n    }\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  }, [location]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (languageDropdownRef.current && !languageDropdownRef.current.contains(event.target as Node)) {\n        setLanguageDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const navLinks = [\n    { href: \"/\", label: t('nav.home') },\n    { href: \"/services\", label: t('nav.services') },\n    { href: \"/projects\", label: t('nav.projects') },\n    { href: \"/products\", label: t('nav.products') },\n    { href: \"/contact\", label: t('nav.contact') },\n  ];\n\n  const languages: { code: Language; name: string; display: string }[] = [\n    { code: 'fr', name: 'Français', display: 'FR' },\n    { code: 'en', name: 'English', display: 'EN' },\n    { code: 'ar', name: 'العربية', display: 'AR' },\n  ];\n\n  return (\n    <nav className={`fixed top-0 w-full z-40 transition-all duration-300 ${isScrolled ? \"bg-white shadow-md\" : \"bg-transparent\"}`}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-20\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <AnimatedLogo className=\"h-10 w-10\" animate={false} />\n              <span className={`ml-2 font-serif font-bold text-xl ${isScrolled ? 'text-blue-dark' : 'text-white'}`}>\n                GROMARBRE\n              </span>\n            </Link>\n          </div>\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navLinks.map((link) => (\n              <Link key={link.href} href={link.href} className={`font-medium transition-colors ${isScrolled ? 'text-charcoal hover:text-gold' : 'text-white hover:text-gold'}`}>\n                {link.label}\n              </Link>\n            ))}\n            \n            {/* Language Selector */}\n            <div className=\"relative\" ref={languageDropdownRef}>\n              <button\n                onClick={() => setLanguageDropdownOpen(!languageDropdownOpen)}\n                className={`flex items-center px-3 py-2 text-sm font-medium rounded transition-colors ${\n                  isScrolled \n                    ? 'text-charcoal hover:bg-gold hover:text-white'\n                    : 'text-white hover:bg-gold hover:text-white'\n                }`}\n              >\n                {languages.find(lang => lang.code === language)?.display}\n                <i className={`fas fa-chevron-down ml-2 text-xs transition-transform ${\n                  languageDropdownOpen ? 'rotate-180' : ''\n                }`}></i>\n              </button>\n              \n              <AnimatePresence>\n                {languageDropdownOpen && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"absolute top-full right-0 mt-2 bg-white rounded-md shadow-lg border border-gray-200 py-1 min-w-[100px] z-50\"\n                  >\n                    {languages.map((lang) => (\n                      <button\n                        key={lang.code}\n                        onClick={() => {\n                          setLanguage(lang.code);\n                          setLanguageDropdownOpen(false);\n                        }}\n                        className={`w-full text-left px-4 py-2 text-sm transition-colors ${\n                          language === lang.code \n                            ? 'bg-gold text-white' \n                            : 'text-charcoal hover:bg-gold hover:text-white'\n                        }`}\n                        title={lang.name}\n                      >\n                        {lang.display}\n                      </button>\n                    ))}\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </div>\n          <div className=\"flex items-center md:hidden\">\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className={`${isScrolled ? 'text-charcoal' : 'text-white'} hover:text-gold`}\n              aria-label=\"Toggle mobile menu\"\n            >\n              <i className={`fas ${mobileMenuOpen ? 'fa-times' : 'fa-bars'} text-2xl`}></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile menu */}\n      <AnimatePresence>\n        {mobileMenuOpen && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: \"auto\", opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"md:hidden bg-white shadow-lg absolute w-full overflow-hidden\"\n          >\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n              {navLinks.map((link) => (\n                <Link key={link.href} href={link.href} className=\"block px-3 py-2 hover:bg-gold hover:text-white rounded-md transition-colors\">\n                  {link.label}\n                </Link>\n              ))}\n              \n              {/* Mobile Language Selector */}\n              <div className=\"px-3 py-2\">\n                <div className=\"text-sm font-medium text-gray-600 mb-2\">Language</div>\n                <div className=\"space-y-1\">\n                  {languages.map((lang) => (\n                    <button\n                      key={lang.code}\n                      onClick={() => {\n                        setLanguage(lang.code);\n                        setMobileMenuOpen(false);\n                      }}\n                      className={`w-full text-left px-3 py-2 text-sm font-medium rounded transition-colors ${\n                        language === lang.code \n                          ? 'bg-gold text-white' \n                          : 'text-charcoal hover:bg-gold hover:text-white'\n                      }`}\n                      title={lang.name}\n                    >\n                      {lang.display} - {lang.name}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","size_bytes":7607},"client/src/components/shared/AnimatedLogo.tsx":{"content":"interface AnimatedLogoProps {\n  className?: string;\n  animate?: boolean;\n  onComplete?: () => void;\n}\n\nconst AnimatedLogo = ({ className = \"\", animate = true, onComplete }: AnimatedLogoProps) => {\n  return (\n    <div className={className}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 300 300\">\n        {/* Background Circle */}\n        <circle cx=\"150\" cy=\"150\" r=\"140\" fill=\"#b0c4de\" stroke=\"#f7941d\" strokeWidth=\"10\"/>\n        \n        {/* Mandala Pattern */}\n        <g transform=\"translate(150,150)\" stroke=\"#f7941d\" strokeWidth=\"3\" fill=\"none\">\n          {/* Define the arm pattern */}\n          <defs>\n            <g id=\"arm\">\n              <path d=\"M0,-60 L10,-40 L0,-20 L-10,-40 Z\" />\n              <path d=\"M0,-20 Q5,-10 0,0 Q-5,-10 0,-20 Z\" />\n            </g>\n          </defs>\n          {/* Rotate around center */}\n          <use href=\"#arm\" transform=\"rotate(0)\"/>\n          <use href=\"#arm\" transform=\"rotate(30)\"/>\n          <use href=\"#arm\" transform=\"rotate(60)\"/>\n          <use href=\"#arm\" transform=\"rotate(90)\"/>\n          <use href=\"#arm\" transform=\"rotate(120)\"/>\n          <use href=\"#arm\" transform=\"rotate(150)\"/>\n          <use href=\"#arm\" transform=\"rotate(180)\"/>\n          <use href=\"#arm\" transform=\"rotate(210)\"/>\n          <use href=\"#arm\" transform=\"rotate(240)\"/>\n          <use href=\"#arm\" transform=\"rotate(270)\"/>\n          <use href=\"#arm\" transform=\"rotate(300)\"/>\n          <use href=\"#arm\" transform=\"rotate(330)\"/>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default AnimatedLogo;","size_bytes":1575},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145}},"version":1}